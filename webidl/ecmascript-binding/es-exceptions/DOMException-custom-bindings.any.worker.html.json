{"status":"OK","subtests":[{"name":"Cannot construct without new","status":"PASS"},{"name":"inherits from Error: prototype-side","status":"PASS"},{"name":"does not inherit from Error: class-side","status":"PASS"},{"name":"message property descriptor","status":"PASS"},{"name":"message getter performs brand checks (i.e. is not [LegacyLenientThis])","status":"PASS"},{"name":"name property descriptor","status":"PASS"},{"name":"name getter performs brand checks (i.e. is not [LegacyLenientThis])","status":"PASS"},{"name":"code property descriptor","status":"PASS"},{"name":"code getter performs brand checks (i.e. is not [LegacyLenientThis])","status":"PASS"},{"name":"code property is not affected by shadowing the name property","status":"PASS"},{"name":"Object.prototype.toString behavior is like other interfaces","status":"PASS"},{"name":"Inherits its toString() from Error.prototype","status":"PASS"},{"name":"toString() behavior from Error.prototype applies as expected","status":"PASS"},{"name":"DOMException.prototype.toString() applied to DOMException.prototype throws because of name/message brand checks","status":"PASS"},{"name":"If the implementation has a stack property on normal errors, it also does on DOMExceptions","status":"FAIL"}]}