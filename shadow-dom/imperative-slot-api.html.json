{"status":"OK","subtests":[{"name":"attachShadow can take slotAssignment parameter.","status":"FAIL"},{"name":"slot.attach() should take variadic not sequence.","status":"FAIL"},{"name":"Imperative slot API can assign nodes in manual slot assignment.","status":"FAIL"},{"name":"Order of slottables is preserved in manual slot assignment.","status":"FAIL"},{"name":"Previously assigned slottable is moved to new slot when it's reassigned.","status":"FAIL"},{"name":"Order and assignment of nodes are preserved during multiple assignment in a row.","status":"FAIL"},{"name":"Assigning invalid nodes should be allowed.","status":"FAIL"},{"name":"Moving a slot to a new host, the slot loses its previously assigned slottables.","status":"FAIL"},{"name":"Moving a slot's tree order position within a shadow host has no impact on its assigned slottables.","status":"FAIL"},{"name":"Appending slottable to different host, it loses slot assignment. It can be re-assigned within a new host.","status":"FAIL"},{"name":"Previously assigned node should not be assigned if slot moved to a new shadow root. The slot remains empty when moved back, trigger recalc.","status":"FAIL"},{"name":"Assignment with the same node in parameters should be ignored, first one wins.","status":"FAIL"},{"name":"Removing a slot from DOM resets its slottable's slot assignment.","status":"FAIL"},{"name":"Nodes can be assigned even if slots or nodes aren't in the same tree.","status":"FAIL"},{"name":"Removing a node from the document does not break manually assigned slot linkage.","status":"FAIL"}]}