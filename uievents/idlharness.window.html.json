{"status":"OK","subtests":[{"name":"idl_test setup","status":"PASS"},{"name":"idl_test validation","status":"PASS"},{"name":"Partial interface UIEvent: original interface defined","status":"PASS"},{"name":"Partial interface UIEvent: member names are unique","status":"PASS"},{"name":"Partial interface MouseEvent: original interface defined","status":"PASS"},{"name":"Partial interface MouseEvent: member names are unique","status":"PASS"},{"name":"Partial interface KeyboardEvent: original interface defined","status":"PASS"},{"name":"Partial interface KeyboardEvent: member names are unique","status":"PASS"},{"name":"Partial interface CompositionEvent: original interface defined","status":"PASS"},{"name":"Partial interface CompositionEvent: member names are unique","status":"PASS"},{"name":"Partial interface UIEvent[2]: original interface defined","status":"PASS"},{"name":"Partial interface UIEvent[2]: member names are unique","status":"PASS"},{"name":"Partial dictionary UIEventInit: original dictionary defined","status":"PASS"},{"name":"Partial dictionary UIEventInit: member names are unique","status":"PASS"},{"name":"Partial interface KeyboardEvent[2]: original interface defined","status":"PASS"},{"name":"Partial interface KeyboardEvent[2]: member names are unique","status":"PASS"},{"name":"Partial dictionary KeyboardEventInit: original dictionary defined","status":"PASS"},{"name":"Partial dictionary KeyboardEventInit: member names are unique","status":"PASS"},{"name":"Partial interface Window: member names are unique","status":"PASS"},{"name":"Window includes GlobalEventHandlers: member names are unique","status":"PASS"},{"name":"Window includes WindowEventHandlers: member names are unique","status":"PASS"},{"name":"Window includes WindowOrWorkerGlobalScope: member names are unique","status":"PASS"},{"name":"Window includes AnimationFrameProvider: member names are unique","status":"PASS"},{"name":"Window includes WindowSessionStorage: member names are unique","status":"PASS"},{"name":"Window includes WindowLocalStorage: member names are unique","status":"PASS"},{"name":"UIEvent interface: existence and properties of interface object","status":"PASS"},{"name":"UIEvent interface object length","status":"PASS"},{"name":"UIEvent interface object name","status":"PASS"},{"name":"UIEvent interface: existence and properties of interface prototype object","status":"PASS"},{"name":"UIEvent interface: existence and properties of interface prototype object's \"constructor\" property","status":"PASS"},{"name":"UIEvent interface: existence and properties of interface prototype object's @@unscopables property","status":"PASS"},{"name":"UIEvent interface: attribute view","status":"PASS"},{"name":"UIEvent interface: attribute detail","status":"PASS"},{"name":"UIEvent interface: operation initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long)","status":"PASS"},{"name":"UIEvent interface: attribute which","status":"PASS"},{"name":"UIEvent must be primary interface of new UIEvent(\"event\")","status":"PASS"},{"name":"Stringification of new UIEvent(\"event\")","status":"PASS"},{"name":"UIEvent interface: new UIEvent(\"event\") must inherit property \"view\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new UIEvent(\"event\") must inherit property \"detail\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new UIEvent(\"event\") must inherit property \"initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long)\" with the proper type","status":"PASS"},{"name":"UIEvent interface: calling initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long) on new UIEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"UIEvent interface: new UIEvent(\"event\") must inherit property \"which\" with the proper type","status":"PASS"},{"name":"FocusEvent interface: existence and properties of interface object","status":"PASS"},{"name":"FocusEvent interface object length","status":"PASS"},{"name":"FocusEvent interface object name","status":"PASS"},{"name":"FocusEvent interface: existence and properties of interface prototype object","status":"PASS"},{"name":"FocusEvent interface: existence and properties of interface prototype object's \"constructor\" property","status":"PASS"},{"name":"FocusEvent interface: existence and properties of interface prototype object's @@unscopables property","status":"PASS"},{"name":"FocusEvent interface: attribute relatedTarget","status":"PASS"},{"name":"FocusEvent must be primary interface of new FocusEvent(\"event\")","status":"PASS"},{"name":"Stringification of new FocusEvent(\"event\")","status":"PASS"},{"name":"FocusEvent interface: new FocusEvent(\"event\") must inherit property \"relatedTarget\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new FocusEvent(\"event\") must inherit property \"view\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new FocusEvent(\"event\") must inherit property \"detail\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new FocusEvent(\"event\") must inherit property \"initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long)\" with the proper type","status":"PASS"},{"name":"UIEvent interface: calling initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long) on new FocusEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"UIEvent interface: new FocusEvent(\"event\") must inherit property \"which\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: existence and properties of interface object","status":"PASS"},{"name":"MouseEvent interface object length","status":"PASS"},{"name":"MouseEvent interface object name","status":"PASS"},{"name":"MouseEvent interface: existence and properties of interface prototype object","status":"PASS"},{"name":"MouseEvent interface: existence and properties of interface prototype object's \"constructor\" property","status":"PASS"},{"name":"MouseEvent interface: existence and properties of interface prototype object's @@unscopables property","status":"PASS"},{"name":"MouseEvent interface: attribute screenX","status":"PASS"},{"name":"MouseEvent interface: attribute screenY","status":"PASS"},{"name":"MouseEvent interface: attribute clientX","status":"PASS"},{"name":"MouseEvent interface: attribute clientY","status":"PASS"},{"name":"MouseEvent interface: attribute ctrlKey","status":"PASS"},{"name":"MouseEvent interface: attribute shiftKey","status":"PASS"},{"name":"MouseEvent interface: attribute altKey","status":"PASS"},{"name":"MouseEvent interface: attribute metaKey","status":"PASS"},{"name":"MouseEvent interface: attribute button","status":"PASS"},{"name":"MouseEvent interface: attribute buttons","status":"PASS"},{"name":"MouseEvent interface: attribute relatedTarget","status":"PASS"},{"name":"MouseEvent interface: operation getModifierState(DOMString)","status":"PASS"},{"name":"MouseEvent interface: operation initMouseEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long, optional long, optional long, optional long, optional long, optional boolean, optional boolean, optional boolean, optional boolean, optional short, optional EventTarget?)","status":"PASS"},{"name":"MouseEvent must be primary interface of new MouseEvent(\"event\")","status":"PASS"},{"name":"Stringification of new MouseEvent(\"event\")","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"screenX\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"screenY\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"clientX\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"clientY\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"ctrlKey\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"shiftKey\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"altKey\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"metaKey\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"button\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"buttons\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"relatedTarget\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"getModifierState(DOMString)\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: calling getModifierState(DOMString) on new MouseEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"MouseEvent interface: new MouseEvent(\"event\") must inherit property \"initMouseEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long, optional long, optional long, optional long, optional long, optional boolean, optional boolean, optional boolean, optional boolean, optional short, optional EventTarget?)\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: calling initMouseEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long, optional long, optional long, optional long, optional long, optional boolean, optional boolean, optional boolean, optional boolean, optional short, optional EventTarget?) on new MouseEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"UIEvent interface: new MouseEvent(\"event\") must inherit property \"view\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new MouseEvent(\"event\") must inherit property \"detail\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new MouseEvent(\"event\") must inherit property \"initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long)\" with the proper type","status":"PASS"},{"name":"UIEvent interface: calling initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long) on new MouseEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"UIEvent interface: new MouseEvent(\"event\") must inherit property \"which\" with the proper type","status":"PASS"},{"name":"WheelEvent interface: existence and properties of interface object","status":"PASS"},{"name":"WheelEvent interface object length","status":"PASS"},{"name":"WheelEvent interface object name","status":"PASS"},{"name":"WheelEvent interface: existence and properties of interface prototype object","status":"PASS"},{"name":"WheelEvent interface: existence and properties of interface prototype object's \"constructor\" property","status":"PASS"},{"name":"WheelEvent interface: existence and properties of interface prototype object's @@unscopables property","status":"PASS"},{"name":"WheelEvent interface: constant DOM_DELTA_PIXEL on interface object","status":"PASS"},{"name":"WheelEvent interface: constant DOM_DELTA_PIXEL on interface prototype object","status":"PASS"},{"name":"WheelEvent interface: constant DOM_DELTA_LINE on interface object","status":"PASS"},{"name":"WheelEvent interface: constant DOM_DELTA_LINE on interface prototype object","status":"PASS"},{"name":"WheelEvent interface: constant DOM_DELTA_PAGE on interface object","status":"PASS"},{"name":"WheelEvent interface: constant DOM_DELTA_PAGE on interface prototype object","status":"PASS"},{"name":"WheelEvent interface: attribute deltaX","status":"PASS"},{"name":"WheelEvent interface: attribute deltaY","status":"PASS"},{"name":"WheelEvent interface: attribute deltaZ","status":"PASS"},{"name":"WheelEvent interface: attribute deltaMode","status":"PASS"},{"name":"WheelEvent must be primary interface of new WheelEvent(\"event\")","status":"PASS"},{"name":"Stringification of new WheelEvent(\"event\")","status":"PASS"},{"name":"WheelEvent interface: new WheelEvent(\"event\") must inherit property \"DOM_DELTA_PIXEL\" with the proper type","status":"PASS"},{"name":"WheelEvent interface: new WheelEvent(\"event\") must inherit property \"DOM_DELTA_LINE\" with the proper type","status":"PASS"},{"name":"WheelEvent interface: new WheelEvent(\"event\") must inherit property \"DOM_DELTA_PAGE\" with the proper type","status":"PASS"},{"name":"WheelEvent interface: new WheelEvent(\"event\") must inherit property \"deltaX\" with the proper type","status":"PASS"},{"name":"WheelEvent interface: new WheelEvent(\"event\") must inherit property \"deltaY\" with the proper type","status":"PASS"},{"name":"WheelEvent interface: new WheelEvent(\"event\") must inherit property \"deltaZ\" with the proper type","status":"PASS"},{"name":"WheelEvent interface: new WheelEvent(\"event\") must inherit property \"deltaMode\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"screenX\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"screenY\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"clientX\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"clientY\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"ctrlKey\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"shiftKey\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"altKey\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"metaKey\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"button\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"buttons\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"relatedTarget\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"getModifierState(DOMString)\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: calling getModifierState(DOMString) on new WheelEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"MouseEvent interface: new WheelEvent(\"event\") must inherit property \"initMouseEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long, optional long, optional long, optional long, optional long, optional boolean, optional boolean, optional boolean, optional boolean, optional short, optional EventTarget?)\" with the proper type","status":"PASS"},{"name":"MouseEvent interface: calling initMouseEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long, optional long, optional long, optional long, optional long, optional boolean, optional boolean, optional boolean, optional boolean, optional short, optional EventTarget?) on new WheelEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"UIEvent interface: new WheelEvent(\"event\") must inherit property \"view\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new WheelEvent(\"event\") must inherit property \"detail\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new WheelEvent(\"event\") must inherit property \"initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long)\" with the proper type","status":"PASS"},{"name":"UIEvent interface: calling initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long) on new WheelEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"UIEvent interface: new WheelEvent(\"event\") must inherit property \"which\" with the proper type","status":"PASS"},{"name":"InputEvent interface: existence and properties of interface object","status":"PASS"},{"name":"InputEvent interface object length","status":"PASS"},{"name":"InputEvent interface object name","status":"PASS"},{"name":"InputEvent interface: existence and properties of interface prototype object","status":"PASS"},{"name":"InputEvent interface: existence and properties of interface prototype object's \"constructor\" property","status":"PASS"},{"name":"InputEvent interface: existence and properties of interface prototype object's @@unscopables property","status":"PASS"},{"name":"InputEvent interface: attribute data","status":"PASS"},{"name":"InputEvent interface: attribute isComposing","status":"FAIL"},{"name":"InputEvent interface: attribute inputType","status":"PASS"},{"name":"InputEvent must be primary interface of new InputEvent(\"event\")","status":"PASS"},{"name":"Stringification of new InputEvent(\"event\")","status":"PASS"},{"name":"InputEvent interface: new InputEvent(\"event\") must inherit property \"data\" with the proper type","status":"PASS"},{"name":"InputEvent interface: new InputEvent(\"event\") must inherit property \"isComposing\" with the proper type","status":"FAIL"},{"name":"InputEvent interface: new InputEvent(\"event\") must inherit property \"inputType\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new InputEvent(\"event\") must inherit property \"view\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new InputEvent(\"event\") must inherit property \"detail\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new InputEvent(\"event\") must inherit property \"initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long)\" with the proper type","status":"PASS"},{"name":"UIEvent interface: calling initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long) on new InputEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"UIEvent interface: new InputEvent(\"event\") must inherit property \"which\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: existence and properties of interface object","status":"PASS"},{"name":"KeyboardEvent interface object length","status":"PASS"},{"name":"KeyboardEvent interface object name","status":"PASS"},{"name":"KeyboardEvent interface: existence and properties of interface prototype object","status":"PASS"},{"name":"KeyboardEvent interface: existence and properties of interface prototype object's \"constructor\" property","status":"PASS"},{"name":"KeyboardEvent interface: existence and properties of interface prototype object's @@unscopables property","status":"PASS"},{"name":"KeyboardEvent interface: constant DOM_KEY_LOCATION_STANDARD on interface object","status":"PASS"},{"name":"KeyboardEvent interface: constant DOM_KEY_LOCATION_STANDARD on interface prototype object","status":"PASS"},{"name":"KeyboardEvent interface: constant DOM_KEY_LOCATION_LEFT on interface object","status":"PASS"},{"name":"KeyboardEvent interface: constant DOM_KEY_LOCATION_LEFT on interface prototype object","status":"PASS"},{"name":"KeyboardEvent interface: constant DOM_KEY_LOCATION_RIGHT on interface object","status":"PASS"},{"name":"KeyboardEvent interface: constant DOM_KEY_LOCATION_RIGHT on interface prototype object","status":"PASS"},{"name":"KeyboardEvent interface: constant DOM_KEY_LOCATION_NUMPAD on interface object","status":"PASS"},{"name":"KeyboardEvent interface: constant DOM_KEY_LOCATION_NUMPAD on interface prototype object","status":"PASS"},{"name":"KeyboardEvent interface: attribute key","status":"PASS"},{"name":"KeyboardEvent interface: attribute code","status":"PASS"},{"name":"KeyboardEvent interface: attribute location","status":"PASS"},{"name":"KeyboardEvent interface: attribute ctrlKey","status":"PASS"},{"name":"KeyboardEvent interface: attribute shiftKey","status":"PASS"},{"name":"KeyboardEvent interface: attribute altKey","status":"PASS"},{"name":"KeyboardEvent interface: attribute metaKey","status":"PASS"},{"name":"KeyboardEvent interface: attribute repeat","status":"PASS"},{"name":"KeyboardEvent interface: attribute isComposing","status":"PASS"},{"name":"KeyboardEvent interface: operation getModifierState(DOMString)","status":"PASS"},{"name":"KeyboardEvent interface: operation initKeyboardEvent(DOMString, optional boolean, optional boolean, optional Window?, optional DOMString, optional unsigned long, optional boolean, optional boolean, optional boolean, optional boolean)","status":"PASS"},{"name":"KeyboardEvent interface: attribute charCode","status":"PASS"},{"name":"KeyboardEvent interface: attribute keyCode","status":"PASS"},{"name":"KeyboardEvent must be primary interface of new KeyboardEvent(\"event\")","status":"PASS"},{"name":"Stringification of new KeyboardEvent(\"event\")","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"DOM_KEY_LOCATION_STANDARD\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"DOM_KEY_LOCATION_LEFT\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"DOM_KEY_LOCATION_RIGHT\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"DOM_KEY_LOCATION_NUMPAD\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"key\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"code\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"location\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"ctrlKey\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"shiftKey\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"altKey\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"metaKey\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"repeat\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"isComposing\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"getModifierState(DOMString)\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: calling getModifierState(DOMString) on new KeyboardEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"initKeyboardEvent(DOMString, optional boolean, optional boolean, optional Window?, optional DOMString, optional unsigned long, optional boolean, optional boolean, optional boolean, optional boolean)\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: calling initKeyboardEvent(DOMString, optional boolean, optional boolean, optional Window?, optional DOMString, optional unsigned long, optional boolean, optional boolean, optional boolean, optional boolean) on new KeyboardEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"charCode\" with the proper type","status":"PASS"},{"name":"KeyboardEvent interface: new KeyboardEvent(\"event\") must inherit property \"keyCode\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new KeyboardEvent(\"event\") must inherit property \"view\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new KeyboardEvent(\"event\") must inherit property \"detail\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new KeyboardEvent(\"event\") must inherit property \"initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long)\" with the proper type","status":"PASS"},{"name":"UIEvent interface: calling initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long) on new KeyboardEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"UIEvent interface: new KeyboardEvent(\"event\") must inherit property \"which\" with the proper type","status":"PASS"},{"name":"CompositionEvent interface: existence and properties of interface object","status":"PASS"},{"name":"CompositionEvent interface object length","status":"PASS"},{"name":"CompositionEvent interface object name","status":"PASS"},{"name":"CompositionEvent interface: existence and properties of interface prototype object","status":"PASS"},{"name":"CompositionEvent interface: existence and properties of interface prototype object's \"constructor\" property","status":"PASS"},{"name":"CompositionEvent interface: existence and properties of interface prototype object's @@unscopables property","status":"PASS"},{"name":"CompositionEvent interface: attribute data","status":"PASS"},{"name":"CompositionEvent interface: operation initCompositionEvent(DOMString, optional boolean, optional boolean, optional WindowProxy?, optional DOMString)","status":"PASS"},{"name":"CompositionEvent must be primary interface of new CompositionEvent(\"event\")","status":"PASS"},{"name":"Stringification of new CompositionEvent(\"event\")","status":"PASS"},{"name":"CompositionEvent interface: new CompositionEvent(\"event\") must inherit property \"data\" with the proper type","status":"PASS"},{"name":"CompositionEvent interface: new CompositionEvent(\"event\") must inherit property \"initCompositionEvent(DOMString, optional boolean, optional boolean, optional WindowProxy?, optional DOMString)\" with the proper type","status":"PASS"},{"name":"CompositionEvent interface: calling initCompositionEvent(DOMString, optional boolean, optional boolean, optional WindowProxy?, optional DOMString) on new CompositionEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"UIEvent interface: new CompositionEvent(\"event\") must inherit property \"view\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new CompositionEvent(\"event\") must inherit property \"detail\" with the proper type","status":"PASS"},{"name":"UIEvent interface: new CompositionEvent(\"event\") must inherit property \"initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long)\" with the proper type","status":"PASS"},{"name":"UIEvent interface: calling initUIEvent(DOMString, optional boolean, optional boolean, optional Window?, optional long) on new CompositionEvent(\"event\") with too few arguments must throw TypeError","status":"PASS"},{"name":"UIEvent interface: new CompositionEvent(\"event\") must inherit property \"which\" with the proper type","status":"PASS"},{"name":"MutationEvent interface: existence and properties of interface object","status":"PASS"},{"name":"MutationEvent interface object length","status":"PASS"},{"name":"MutationEvent interface object name","status":"PASS"},{"name":"MutationEvent interface: existence and properties of interface prototype object","status":"PASS"},{"name":"MutationEvent interface: existence and properties of interface prototype object's \"constructor\" property","status":"PASS"},{"name":"MutationEvent interface: existence and properties of interface prototype object's @@unscopables property","status":"PASS"},{"name":"MutationEvent interface: constant MODIFICATION on interface object","status":"PASS"},{"name":"MutationEvent interface: constant MODIFICATION on interface prototype object","status":"PASS"},{"name":"MutationEvent interface: constant ADDITION on interface object","status":"PASS"},{"name":"MutationEvent interface: constant ADDITION on interface prototype object","status":"PASS"},{"name":"MutationEvent interface: constant REMOVAL on interface object","status":"PASS"},{"name":"MutationEvent interface: constant REMOVAL on interface prototype object","status":"PASS"},{"name":"MutationEvent interface: attribute relatedNode","status":"PASS"},{"name":"MutationEvent interface: attribute prevValue","status":"PASS"},{"name":"MutationEvent interface: attribute newValue","status":"PASS"},{"name":"MutationEvent interface: attribute attrName","status":"PASS"},{"name":"MutationEvent interface: attribute attrChange","status":"PASS"},{"name":"MutationEvent interface: operation initMutationEvent(DOMString, optional boolean, optional boolean, optional Node?, optional DOMString, optional DOMString, optional DOMString, optional unsigned short)","status":"PASS"}]}