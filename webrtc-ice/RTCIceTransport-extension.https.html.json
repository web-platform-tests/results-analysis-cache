{"status":"OK","subtests":[{"name":"RTCIceTransport constructor does not throw","status":"FAIL"},{"name":"RTCIceTransport initial properties are set","status":"FAIL"},{"name":"gather() with { iceServers: null } should throw TypeError","status":"FAIL"},{"name":"gather() with { iceServers: undefined } should succeed","status":"FAIL"},{"name":"gather() with one turns server, one turn server, username, credential should succeed","status":"FAIL"},{"name":"gather() with 2 stun servers should succeed","status":"FAIL"},{"name":"gather() throws if closed","status":"FAIL"},{"name":"gather() transitions gatheringState to 'gathering'","status":"FAIL"},{"name":"gather() throws if called twice","status":"FAIL"},{"name":"eventually transition gatheringState to 'complete'","status":"FAIL"},{"name":"onicecandidate fires with null candidate before gatheringState transitions to 'complete'","status":"FAIL"},{"name":"gather() returns at least one host candidate","status":"FAIL"},{"name":"gather() returns no candidates with { gatherPolicy: 'relay'} and no turn servers","status":"FAIL"},{"name":"start() throws if closed","status":"FAIL"},{"name":"start() throws if usernameFragment or password not set","status":"FAIL"},{"name":"start() throws if usernameFragment does not conform to syntax","status":"FAIL"},{"name":"start() throws if password does not conform to syntax","status":"FAIL"},{"name":"start() does not transition state to 'checking' if no remote candidates added","status":"FAIL"},{"name":"start() with default role sets role attribute to 'controlled'","status":"FAIL"},{"name":"start() sets role attribute to 'controlling'","status":"FAIL"},{"name":"addRemoteCandidate() throws if closed","status":"FAIL"},{"name":"addRemoteCandidate() throws on invalid candidate","status":"FAIL"},{"name":"start() transitions state to 'checking' if one remote candidate had been added","status":"FAIL"},{"name":"addRemoteCandidate() transitions state to 'checking' if start() had been called before","status":"FAIL"},{"name":"start() throws if later called with a different role","status":"FAIL"},{"name":"start() flushes remote candidates and transitions state to 'new' if later called with different remote parameters","status":"FAIL"},{"name":"Two RTCIceTransports connect to each other","status":"FAIL"},{"name":"Two RTCIceTransports configured with the controlling role resolve the conflict in band and still connect.","status":"FAIL"},{"name":"Two RTCIceTransports configured with the controlled role resolve the conflict in band and still connect.","status":"FAIL"},{"name":"Selected candidate pair changes once the RTCIceTransports connect.","status":"FAIL"},{"name":"getSelectedCandidatePair() returns null once the RTCIceTransport is stopped.","status":"FAIL"}]}