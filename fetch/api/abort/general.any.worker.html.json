{"status":"OK","subtests":[{"name":"Aborting rejects with AbortError","status":"FAIL"},{"name":"Aborting rejects with AbortError - no-cors","status":"FAIL"},{"name":"TypeError from request constructor takes priority - RequestInit's window is not null","status":"FAIL"},{"name":"TypeError from request constructor takes priority - Input URL is not valid","status":"FAIL"},{"name":"TypeError from request constructor takes priority - Input URL has credentials","status":"FAIL"},{"name":"TypeError from request constructor takes priority - RequestInit's mode is navigate","status":"FAIL"},{"name":"TypeError from request constructor takes priority - RequestInit's referrer is invalid","status":"FAIL"},{"name":"TypeError from request constructor takes priority - RequestInit's method is invalid","status":"FAIL"},{"name":"TypeError from request constructor takes priority - RequestInit's method is forbidden","status":"FAIL"},{"name":"TypeError from request constructor takes priority - RequestInit's mode is no-cors and method is not simple","status":"FAIL"},{"name":"TypeError from request constructor takes priority - RequestInit's cache mode is only-if-cached and mode is not same-origin","status":"FAIL"},{"name":"TypeError from request constructor takes priority - Request with cache mode: only-if-cached and fetch mode cors","status":"FAIL"},{"name":"TypeError from request constructor takes priority - Request with cache mode: only-if-cached and fetch mode no-cors","status":"FAIL"},{"name":"TypeError from request constructor takes priority - Bad referrerPolicy init parameter value","status":"FAIL"},{"name":"TypeError from request constructor takes priority - Bad mode init parameter value","status":"FAIL"},{"name":"TypeError from request constructor takes priority - Bad credentials init parameter value","status":"FAIL"},{"name":"TypeError from request constructor takes priority - Bad cache init parameter value","status":"FAIL"},{"name":"TypeError from request constructor takes priority - Bad redirect init parameter value","status":"FAIL"},{"name":"Request objects have a signal property","status":"FAIL"},{"name":"Signal on request object","status":"FAIL"},{"name":"Signal on request object created from request object","status":"FAIL"},{"name":"Signal on request object created from request object, with signal on second request","status":"FAIL"},{"name":"Signal on request object created from request object, with signal on second request overriding another","status":"FAIL"},{"name":"Signal retained after unrelated properties are overridden by fetch","status":"FAIL"},{"name":"Signal removed by setting to null","status":"FAIL"},{"name":"Already aborted signal rejects immediately","status":"FAIL"},{"name":"Request is still 'used' if signal is aborted before fetching","status":"FAIL"},{"name":"response.arrayBuffer() rejects if already aborted","status":"FAIL"},{"name":"response.blob() rejects if already aborted","status":"FAIL"},{"name":"response.formData() rejects if already aborted","status":"FAIL"},{"name":"response.json() rejects if already aborted","status":"FAIL"},{"name":"response.text() rejects if already aborted","status":"FAIL"},{"name":"Already aborted signal does not make request","status":"FAIL"},{"name":"Already aborted signal can be used for many fetches","status":"FAIL"},{"name":"Signal can be used to abort other fetches, even if another fetch succeeded before aborting","status":"FAIL"},{"name":"Underlying connection is closed when aborting after receiving response","status":"FAIL"},{"name":"Underlying connection is closed when aborting after receiving response - no-cors","status":"FAIL"},{"name":"Fetch aborted & connection closed when aborted after calling response.arrayBuffer()","status":"FAIL"},{"name":"Fetch aborted & connection closed when aborted after calling response.blob()","status":"FAIL"},{"name":"Fetch aborted & connection closed when aborted after calling response.formData()","status":"FAIL"},{"name":"Fetch aborted & connection closed when aborted after calling response.json()","status":"FAIL"},{"name":"Fetch aborted & connection closed when aborted after calling response.text()","status":"FAIL"},{"name":"Stream errors once aborted. Underlying connection closed.","status":"FAIL"},{"name":"Stream errors once aborted, after reading. Underlying connection closed.","status":"FAIL"},{"name":"Stream will not error if body is empty. It's closed with an empty queue before it errors.","status":"FAIL"},{"name":"Readable stream synchronously cancels with AbortError if aborted before reading","status":"FAIL"},{"name":"Signal state is cloned","status":"FAIL"},{"name":"Clone aborts with original controller","status":"FAIL"}]}