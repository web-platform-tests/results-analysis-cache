{"status":"OK","subtests":[{"name":"a signal argument 'null' should cause pipeTo() to reject","status":"FAIL"},{"name":"a signal argument 'AbortSignal' should cause pipeTo() to reject","status":"FAIL"},{"name":"a signal argument 'true' should cause pipeTo() to reject","status":"FAIL"},{"name":"a signal argument '-1' should cause pipeTo() to reject","status":"FAIL"},{"name":"a signal argument '[object AbortSignal]' should cause pipeTo() to reject","status":"FAIL"},{"name":"an aborted signal should cause the writable stream to reject with an AbortError","status":"FAIL"},{"name":"all the AbortError objects should be the same object","status":"FAIL"},{"name":"preventCancel should prevent canceling the readable","status":"FAIL"},{"name":"preventAbort should prevent aborting the readable","status":"FAIL"},{"name":"preventCancel and preventAbort should prevent canceling the readable and aborting the readable","status":"FAIL"},{"name":"abort should prevent further reads","status":"FAIL"},{"name":"all pending writes should complete on abort","status":"FAIL"},{"name":"a rejection from underlyingSource.cancel() should be returned by pipeTo()","status":"FAIL"},{"name":"a rejection from underlyingSink.abort() should be returned by pipeTo()","status":"FAIL"},{"name":"a rejection from underlyingSink.abort() should be preferred to one from underlyingSource.cancel()","status":"FAIL"},{"name":"abort signal takes priority over closed readable","status":"FAIL"},{"name":"abort signal takes priority over errored readable","status":"FAIL"},{"name":"abort signal takes priority over closed writable","status":"FAIL"},{"name":"abort signal takes priority over errored writable","status":"FAIL"},{"name":"abort should do nothing after the readable is closed","status":"FAIL"},{"name":"abort should do nothing after the readable is errored","status":"FAIL"},{"name":"abort should do nothing after the readable is errored, even with pending writes","status":"FAIL"},{"name":"abort should do nothing after the writable is errored","status":"FAIL"}]}