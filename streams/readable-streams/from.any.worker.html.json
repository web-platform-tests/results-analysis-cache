{"status":"OK","subtests":[{"name":"ReadableStream.from accepts an array of values","status":"PASS"},{"name":"ReadableStream.from accepts an array of promises","status":"PASS"},{"name":"ReadableStream.from accepts an array iterator","status":"PASS"},{"name":"ReadableStream.from accepts a string","status":"PASS"},{"name":"ReadableStream.from accepts a Set","status":"PASS"},{"name":"ReadableStream.from accepts a Set iterator","status":"PASS"},{"name":"ReadableStream.from accepts a sync generator","status":"PASS"},{"name":"ReadableStream.from accepts an async generator","status":"PASS"},{"name":"ReadableStream.from accepts a sync iterable of values","status":"PASS"},{"name":"ReadableStream.from accepts a sync iterable of promises","status":"PASS"},{"name":"ReadableStream.from accepts an async iterable","status":"PASS"},{"name":"ReadableStream.from accepts a ReadableStream","status":"PASS"},{"name":"ReadableStream.from accepts a ReadableStream async iterator","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically null","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically undefined","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically 0","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically NaN","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically true","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically {}","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically Object.create(null)","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically a function","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically a symbol","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically an object with a non-callable @@iterator method","status":"PASS"},{"name":"ReadableStream.from throws on invalid iterables; specifically an object with a non-callable @@asyncIterator method","status":"PASS"},{"name":"ReadableStream.from re-throws errors from calling the @@iterator method","status":"PASS"},{"name":"ReadableStream.from re-throws errors from calling the @@asyncIterator method","status":"PASS"},{"name":"ReadableStream.from ignores @@iterator if @@asyncIterator exists","status":"PASS"},{"name":"ReadableStream.from accepts an empty iterable","status":"PASS"},{"name":"ReadableStream.from: stream errors when next() rejects","status":"PASS"},{"name":"ReadableStream.from: stream stalls when next() never settles","status":"PASS"},{"name":"ReadableStream.from: calls next() after first read()","status":"PASS"},{"name":"ReadableStream.from: cancelling the returned stream calls and awaits return()","status":"PASS"},{"name":"ReadableStream.from: return() is not called when iterator completes normally","status":"PASS"},{"name":"ReadableStream.from: cancel() rejects when return() fulfills with a non-object","status":"PASS"},{"name":"ReadableStream.from: reader.read() inside next()","status":"PASS"},{"name":"ReadableStream.from: reader.cancel() inside next()","status":"PASS"},{"name":"ReadableStream.from: reader.cancel() inside return()","status":"PASS"},{"name":"ReadableStream.from(array), push() to array while reading","status":"PASS"}]}