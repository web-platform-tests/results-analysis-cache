{"status":"OK","subtests":[{"name":"ReadableStream can be constructed with no errors","status":"FAIL"},{"name":"ReadableStream can't be constructed with garbage","status":"FAIL"},{"name":"ReadableStream can't be constructed with an invalid type","status":"FAIL"},{"name":"ReadableStream instances should have the correct list of properties","status":"FAIL"},{"name":"ReadableStream constructor should throw for non-function start arguments","status":"FAIL"},{"name":"ReadableStream constructor will not tolerate initial garbage as cancel argument","status":"FAIL"},{"name":"ReadableStream constructor will not tolerate initial garbage as pull argument","status":"FAIL"},{"name":"ReadableStream start should be called with the proper parameters","status":"FAIL"},{"name":"ReadableStream start controller parameter should be extensible","status":"FAIL"},{"name":"default ReadableStream getReader() should only accept mode:undefined","status":"FAIL"},{"name":"ReadableStream should be able to call start method within prototype chain of its source","status":"FAIL"},{"name":"ReadableStream start should be able to return a promise","status":"FAIL"},{"name":"ReadableStream start should be able to return a promise and reject it","status":"FAIL"},{"name":"ReadableStream should be able to enqueue different objects.","status":"FAIL"},{"name":"ReadableStream: if pull rejects, it should error the stream","status":"FAIL"},{"name":"ReadableStream: should only call pull once upon starting the stream","status":"FAIL"},{"name":"ReadableStream: should call pull when trying to read from a started, empty stream","status":"FAIL"},{"name":"ReadableStream: should only call pull once on a non-empty stream read from before start fulfills","status":"FAIL"},{"name":"ReadableStream: should only call pull once on a non-empty stream read from after start fulfills","status":"FAIL"},{"name":"ReadableStream: should call pull in reaction to read()ing the last chunk, if not draining","status":"FAIL"},{"name":"ReadableStream: should not call pull() in reaction to read()ing the last chunk, if draining","status":"FAIL"},{"name":"ReadableStream: should not call pull until the previous pull call's promise fulfills","status":"FAIL"},{"name":"ReadableStream: should pull after start, and after every read","status":"FAIL"},{"name":"ReadableStream: should not call pull after start if the stream is now closed","status":"FAIL"},{"name":"ReadableStream: should call pull after enqueueing from inside pull (with no read requests), if strategy allows","status":"FAIL"},{"name":"ReadableStream pull should be able to close a stream.","status":"FAIL"},{"name":"ReadableStream pull should be able to error a stream.","status":"FAIL"},{"name":"ReadableStream pull should be able to error a stream and throw.","status":"FAIL"},{"name":"ReadableStream: enqueue should throw when the stream is readable but draining","status":"FAIL"},{"name":"ReadableStream: enqueue should throw when the stream is closed","status":"FAIL"},{"name":"ReadableStream: should call underlying source methods as methods","status":"FAIL"},{"name":"ReadableStream: desiredSize when closed","status":"FAIL"},{"name":"ReadableStream: desiredSize when errored","status":"FAIL"},{"name":"Subclassing ReadableStream should work","status":"FAIL"},{"name":"ReadableStream strategies: the default strategy should give desiredSize of 1 to start, decreasing by 1 per enqueue","status":"FAIL"},{"name":"ReadableStream strategies: the default strategy should continue giving desiredSize of 1 if the chunks are read immediately","status":"FAIL"},{"name":"ReadableStream integration test: adapting a random push source","status":"FAIL"},{"name":"ReadableStream integration test: adapting a sync pull source","status":"FAIL"},{"name":"ReadableStream integration test: adapting an async pull source","status":"FAIL"}]}