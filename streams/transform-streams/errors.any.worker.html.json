{"status":"OK","subtests":[{"name":"TransformStream errors thrown in transform put the writable and readable in an errored state","status":"FAIL"},{"name":"TransformStream errors thrown in flush put the writable and readable in an errored state","status":"FAIL"},{"name":"errored TransformStream should not enqueue new chunks","status":"FAIL"},{"name":"TransformStream transformer.start() rejected promise should error the stream","status":"FAIL"},{"name":"when controller.error is followed by a rejection, the error reason should come from controller.error","status":"FAIL"},{"name":"TransformStream constructor should throw when start does","status":"FAIL"},{"name":"when strategy.size throws inside start(), the constructor should throw the same error","status":"FAIL"},{"name":"when strategy.size calls controller.error() then throws, the constructor should throw the first error","status":"FAIL"},{"name":"cancelling the readable side should error the writable","status":"FAIL"},{"name":"it should be possible to error the readable between close requested and complete","status":"FAIL"},{"name":"an exception from transform() should error the stream if terminate has been requested but not completed","status":"FAIL"},{"name":"abort should set the close reason for the writable when it happens before cancel during start, but cancel should still succeed","status":"FAIL"},{"name":"abort should set the close reason for the writable when it happens before cancel during underlying sink write, but cancel should still succeed","status":"FAIL"},{"name":"controller.error() should do nothing the second time it is called","status":"FAIL"},{"name":"controller.error() should do nothing after readable.cancel()","status":"FAIL"},{"name":"controller.error() should do nothing after writable.abort() has completed","status":"FAIL"},{"name":"controller.error() should do nothing after a transformer method has thrown an exception","status":"FAIL"},{"name":"erroring during write with backpressure should result in the write failing","status":"FAIL"},{"name":"a write() that was waiting for backpressure should reject if the writable is aborted","status":"FAIL"},{"name":"the readable should be errored with the reason passed to the writable abort() method","status":"FAIL"}]}