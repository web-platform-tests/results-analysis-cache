{"status":"OK","subtests":[{"name":"TransformStream can be constructed with a transform function","status":"FAIL"},{"name":"TransformStream can be constructed with no transform function","status":"FAIL"},{"name":"TransformStream writable starts in the writable state","status":"FAIL"},{"name":"Identity TransformStream: can read from readable what is put into writable","status":"FAIL"},{"name":"Uppercaser sync TransformStream: can read from readable transformed version of what is put into writable","status":"FAIL"},{"name":"Uppercaser-doubler sync TransformStream: can read both chunks put into the readable","status":"FAIL"},{"name":"Uppercaser async TransformStream: can read from readable transformed version of what is put into writable","status":"FAIL"},{"name":"Uppercaser-doubler async TransformStream: can read both chunks put into the readable","status":"FAIL"},{"name":"TransformStream: by default, closing the writable closes the readable (when there are no queued writes)","status":"FAIL"},{"name":"TransformStream: by default, closing the writable waits for transforms to finish before closing both","status":"FAIL"},{"name":"TransformStream: by default, closing the writable closes the readable after sync enqueues and async done","status":"FAIL"},{"name":"TransformStream: by default, closing the writable closes the readable after async enqueues and async done","status":"FAIL"},{"name":"Transform stream should call transformer methods as methods","status":"FAIL"},{"name":"methods should not not have .apply() or .call() called","status":"FAIL"},{"name":"TransformStream start, transform, and flush should be strictly ordered","status":"FAIL"},{"name":"it should be possible to call transform() synchronously","status":"FAIL"},{"name":"closing the writable should close the readable when there are no queued chunks, even with backpressure","status":"FAIL"},{"name":"enqueue() should throw after controller.terminate()","status":"FAIL"},{"name":"enqueue() should throw after readable.cancel()","status":"FAIL"},{"name":"controller.terminate() should do nothing the second time it is called","status":"FAIL"},{"name":"terminate() should do nothing after readable.cancel()","status":"FAIL"},{"name":"start() should not be called twice","status":"FAIL"},{"name":"specifying a defined readableType should throw","status":"FAIL"},{"name":"specifying a defined writableType should throw","status":"FAIL"},{"name":"Subclassing TransformStream should work","status":"FAIL"}]}