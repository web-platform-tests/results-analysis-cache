{"status":"TIMEOUT","subtests":[{"name":"Close watchers created without user activation, but close()d via user activation, do not fire cancel","status":"PASS"},{"name":"Close watchers created without user activation, but closed via a close request after user activation, fires cancel","status":"PASS"},{"name":"Close watchers created without user activation, but closed via a close request after user activation, fires cancel, which can be preventDefault()ed","status":"PASS"},{"name":"Multiple close watchers created without user activation close together (with no cancel)","status":"PASS"},{"name":"Creating a close watcher from user activation keeps it separate from the free close watcher, but they don't fire cancel","status":"PASS"},{"name":"Creating a close watcher from user activation, and closing close watchers with a close request after user activation, fires cancel","status":"TIMEOUT"},{"name":"Multiple close watchers created with user activation close in reverse order","status":"NOTRUN"},{"name":"3 user activations let you have 3 + 1 = 4 ungrouped close watchers/0 cancel events","status":"NOTRUN"},{"name":"closing the free close watcher via a close request allows a new free one to be created without user activation, and it receives a second close request","status":"NOTRUN"},{"name":"The second watcher can be the free watcher, if the first is created with user activation","status":"NOTRUN"},{"name":"The third watcher can be the free watcher, if the first two are created with user activation","status":"NOTRUN"},{"name":"destroy()ing the free close watcher allows a new free one to be created without user activation, and it receives the close request","status":"NOTRUN"}]}