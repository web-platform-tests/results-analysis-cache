{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"initialize\"","status":"PASS"},{"name":"Executing \"existence\"","status":"PASS"},{"name":"Executing \"parameters\"","status":"PASS"},{"name":"Executing \"exceptions-createIIRFilter\"","status":"PASS"},{"name":"Executing \"exceptions-getFrequencyData\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [initialize] ","status":"PASS"},{"name":"  Initialize context for testing did not throw an exception.","status":"PASS"},{"name":"< [initialize] All assertions passed. (total 1 assertions)","status":"PASS"},{"name":"> [existence] ","status":"PASS"},{"name":"  context.createIIRFilter does exist.","status":"PASS"},{"name":"< [existence] All assertions passed. (total 1 assertions)","status":"PASS"},{"name":"> [parameters] ","status":"PASS"},{"name":"  numberOfInputs is equal to 1.","status":"PASS"},{"name":"  numberOfOutputs is equal to 1.","status":"PASS"},{"name":"  channelCountMode is equal to max.","status":"PASS"},{"name":"  channelInterpretation is equal to speakers.","status":"PASS"},{"name":"< [parameters] All assertions passed. (total 4 assertions)","status":"PASS"},{"name":"> [exceptions-createIIRFilter] ","status":"PASS"},{"name":"  createIIRFilter() threw TypeError: \"BaseAudioContext.createIIRFilter: At least 2 arguments required, but only 0 passed\".","status":"PASS"},{"name":"  createIIRFilter(new Float32Array(1)) threw TypeError: \"BaseAudioContext.createIIRFilter: At least 2 arguments required, but only 1 passed\".","status":"PASS"},{"name":"  createIIRFilter(null, null) threw TypeError: \"BaseAudioContext.createIIRFilter: Argument 1 can't be converted to a sequence.\".","status":"PASS"},{"name":"  createIIRFilter([], []) threw NotSupportedError: \"BaseAudioContext.createIIRFilter: \"feedforward\" length 0 is not in the range [1,20]\".","status":"PASS"},{"name":"  createIIRFilter([1], []) threw NotSupportedError: \"BaseAudioContext.createIIRFilter: \"feedback\" length 0 is not in the range [1,20]\".","status":"PASS"},{"name":"  createIIRFilter([], [1]) threw NotSupportedError: \"BaseAudioContext.createIIRFilter: \"feedforward\" length 0 is not in the range [1,20]\".","status":"PASS"},{"name":"  createIIRFilter(new Float32Array(20), new Float32Array(20)) did not throw an exception.","status":"PASS"},{"name":"  createIIRFilter(new Float32Array(21), [1]) threw NotSupportedError: \"BaseAudioContext.createIIRFilter: \"feedforward\" length 21 is not in the range [1,20]\".","status":"PASS"},{"name":"  createIIRFilter([1], new Float32Array(21)) threw NotSupportedError: \"BaseAudioContext.createIIRFilter: \"feedback\" length 21 is not in the range [1,20]\".","status":"PASS"},{"name":"  createIIRFilter([1], new Float32Array(2)) threw InvalidStateError: \"BaseAudioContext.createIIRFilter: First value in \"feedback\" must be nonzero\".","status":"PASS"},{"name":"  createIIRFilter(new Float32Array(10), [1]) threw InvalidStateError: \"BaseAudioContext.createIIRFilter: \"feedforward\" must contain some nonzero values\".","status":"PASS"},{"name":"  createIIRFilter([1], [1, NaN, Infinity]) threw TypeError: \"BaseAudioContext.createIIRFilter: Element of argument 2 is not a finite floating-point value.\".","status":"PASS"},{"name":"  createIIRFilter([1, NaN, Infinity], [1]) threw TypeError: \"BaseAudioContext.createIIRFilter: Element of argument 1 is not a finite floating-point value.\".","status":"PASS"},{"name":"  createIIRFilter([1, 'abc', []], [1]) threw TypeError: \"BaseAudioContext.createIIRFilter: Element of argument 1 is not a finite floating-point value.\".","status":"PASS"},{"name":"< [exceptions-createIIRFilter] All assertions passed. (total 14 assertions)","status":"PASS"},{"name":"> [exceptions-getFrequencyData] ","status":"PASS"},{"name":"  getFrequencyResponse(null, new Float32Array(1), new Float32Array(1)) threw TypeError: \"IIRFilterNode.getFrequencyResponse: Argument 1 is not an object.\".","status":"PASS"},{"name":"  getFrequencyResponse(new Float32Array(1), null, new Float32Array(1)) threw TypeError: \"IIRFilterNode.getFrequencyResponse: Argument 2 is not an object.\".","status":"PASS"},{"name":"  getFrequencyResponse(new Float32Array(1), new Float32Array(1), null) threw TypeError: \"IIRFilterNode.getFrequencyResponse: Argument 3 is not an object.\".","status":"PASS"},{"name":"X getFrequencyResponse(new Float32Array(10), new Float32Array(1), new Float32Array(20)) did not throw an exception.","status":"FAIL"},{"name":"X getFrequencyResponse(new Float32Array(10), new Float32Array(20), new Float32Array(1)) did not throw an exception.","status":"FAIL"},{"name":"< [exceptions-getFrequencyData] 2 out of 5 assertions were failed.","status":"FAIL"},{"name":"# AUDIT TASK RUNNER FINISHED: 1 out of 5 tasks were failed.","status":"FAIL"}]}