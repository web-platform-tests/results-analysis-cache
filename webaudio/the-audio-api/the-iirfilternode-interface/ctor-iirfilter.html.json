{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"initialize\"","status":"PASS"},{"name":"Executing \"invalid constructor\"","status":"PASS"},{"name":"Executing \"default constructor\"","status":"PASS"},{"name":"Executing \"test AudioNodeOptions\"","status":"PASS"},{"name":"Executing \"constructor options\"","status":"PASS"},{"name":"Executing \"functionality\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [initialize] ","status":"PASS"},{"name":"  context = new OfflineAudioContext(...) did not throw an exception.","status":"PASS"},{"name":"< [initialize] All assertions passed. (total 1 assertions)","status":"PASS"},{"name":"> [invalid constructor] ","status":"PASS"},{"name":"  new IIRFilterNode() threw TypeError: \"Failed to construct 'IIRFilterNode': 2 arguments required, but only 0 present.\".","status":"PASS"},{"name":"  new IIRFilterNode(1) threw TypeError: \"Failed to construct 'IIRFilterNode': 2 arguments required, but only 1 present.\".","status":"PASS"},{"name":"  new IIRFilterNode(context, 42) threw TypeError: \"Failed to construct 'IIRFilterNode': cannot convert to dictionary.\".","status":"PASS"},{"name":"< [invalid constructor] All assertions passed. (total 3 assertions)","status":"PASS"},{"name":"> [default constructor] ","status":"PASS"},{"name":"  node0 = new IIRFilterNode(context, {\"feedforward\":[1],\"feedback\":[1,-0.9]}) did not throw an exception.","status":"PASS"},{"name":"  node0 instanceof IIRFilterNode is equal to true.","status":"PASS"},{"name":"  node0.numberOfInputs is equal to 1.","status":"PASS"},{"name":"  node0.numberOfOutputs is equal to 1.","status":"PASS"},{"name":"  node0.channelCount is equal to 2.","status":"PASS"},{"name":"  node0.channelCountMode is equal to max.","status":"PASS"},{"name":"  node0.channelInterpretation is equal to speakers.","status":"PASS"},{"name":"< [default constructor] All assertions passed. (total 7 assertions)","status":"PASS"},{"name":"> [test AudioNodeOptions] ","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelCount: 17}) did not throw an exception.","status":"PASS"},{"name":"  node.channelCount is equal to 17.","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelCount: 0}) threw NotSupportedError: \"Failed to construct 'IIRFilterNode': The channel count provided (0) is outside the range [1, 32].\".","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelCount: 99}) threw NotSupportedError: \"Failed to construct 'IIRFilterNode': The channel count provided (99) is outside the range [1, 32].\".","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelCountMode: \"max\"} did not throw an exception.","status":"PASS"},{"name":"  node.channelCountMode is equal to max.","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelCountMode: \"max\"}) did not throw an exception.","status":"PASS"},{"name":"  node.channelCountMode after valid setter is equal to max.","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelCountMode: \"clamped-max\"}) did not throw an exception.","status":"PASS"},{"name":"  node.channelCountMode after valid setter is equal to clamped-max.","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelCountMode: \"explicit\"}) did not throw an exception.","status":"PASS"},{"name":"  node.channelCountMode after valid setter is equal to explicit.","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelCountMode: \"foobar\"} threw TypeError: \"Failed to construct 'IIRFilterNode': The provided value 'foobar' is not a valid enum value of type ChannelCountMode.\".","status":"PASS"},{"name":"  node.channelCountMode after invalid setter is equal to explicit.","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelInterpretation: \"speakers\"}) did not throw an exception.","status":"PASS"},{"name":"  node.channelInterpretation is equal to speakers.","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelInterpretation: \"discrete\"}) did not throw an exception.","status":"PASS"},{"name":"  node.channelInterpretation is equal to discrete.","status":"PASS"},{"name":"  new IIRFilterNode(c, {channelInterpretation: \"foobar\"}) threw TypeError: \"Failed to construct 'IIRFilterNode': The provided value 'foobar' is not a valid enum value of type ChannelInterpretation.\".","status":"PASS"},{"name":"  node.channelInterpretation after invalid setter is equal to discrete.","status":"PASS"},{"name":"< [test AudioNodeOptions] All assertions passed. (total 20 assertions)","status":"PASS"},{"name":"> [constructor options] ","status":"PASS"},{"name":"  node = new IIRFilterNode(, {\"feedback\":[1,0.5]}) threw TypeError: \"Failed to construct 'IIRFilterNode': required member feedforward is undefined.\".","status":"PASS"},{"name":"  node = new IIRFilterNode(c, {\"feedforward\":[1,0.5]}) threw TypeError: \"Failed to construct 'IIRFilterNode': required member feedback is undefined.\".","status":"PASS"},{"name":"< [constructor options] All assertions passed. (total 2 assertions)","status":"PASS"},{"name":"> [functionality] ","status":"PASS"},{"name":"  Output of filter using new IIRFilter(...) is identical to the array [0,0.057564008980989456,0.1437191367149353,0.21500660479068756,0.29277655482292175,0.36597779393196106,0.4397641718387604,0.511192798614502,0.5813757181167603,0.649405837059021,0.7153946161270142,0.7789547443389893,0.8399596214294434,0.8981647491455078,0.9533984065055847,1.0054664611816406...].","status":"PASS"},{"name":"< [functionality] All assertions passed. (total 1 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 6 tasks ran successfully.","status":"PASS"}]}