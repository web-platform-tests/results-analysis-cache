{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"start/stop exceptions\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [start/stop exceptions] ","status":"PASS"},{"name":"  start(NaN) threw TypeError: \"The provided value is non-finite\".","status":"PASS"},{"name":"  start(Infinity) threw TypeError: \"The provided value is non-finite\".","status":"PASS"},{"name":"  start(-Infinity) threw TypeError: \"The provided value is non-finite\".","status":"PASS"},{"name":"  Calling stop() before start() threw InvalidStateError: \"cannot call stop without calling start first.\".","status":"PASS"},{"name":"  start(-1) threw RangeError: \"when value should be positive\".","status":"PASS"},{"name":"  start(0,-1) threw RangeError: \"offset value should be positive\".","status":"PASS"},{"name":"  start(0,0,-1) threw RangeError: \"duration value should be positive\".","status":"PASS"},{"name":"  Calling start() twice threw InvalidStateError: \"Cannot call start more than once.\".","status":"PASS"},{"name":"  stop(-1) threw RangeError: \"when value should be positive\".","status":"PASS"},{"name":"  stop(NaN) threw TypeError: \"The provided value is non-finite\".","status":"PASS"},{"name":"  stop(Infinity) threw TypeError: \"The provided value is non-finite\".","status":"PASS"},{"name":"  stop(-Infinity) threw TypeError: \"The provided value is non-finite\".","status":"PASS"},{"name":"< [start/stop exceptions] All assertions passed. (total 12 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 1 tasks ran successfully.","status":"PASS"}]}