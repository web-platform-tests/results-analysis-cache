{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"cancel-time\"","status":"PASS"},{"name":"Executing \"cancel1\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [cancel-time] handle cancelTime values","status":"PASS"},{"name":"  cancelScheduledValues(-1) threw RangeError: \"cancelTime must be a positive value\".","status":"PASS"},{"name":"  cancelScheduledValues(NaN) threw TypeError: \"The provided value is non-finite\".","status":"PASS"},{"name":"  cancelScheduledValues(Infinity) threw TypeError: \"The provided value is non-finite\".","status":"PASS"},{"name":"< [cancel-time] All assertions passed. (total 3 assertions)","status":"PASS"},{"name":"> [cancel1] cancel setValueCurve","status":"PASS"},{"name":"  cancelTime is after curve start is greater than 0.25.","status":"PASS"},{"name":"  cancelTime is before curve ends is less than 0.5.","status":"PASS"},{"name":"  gain.gain.setValueAtTime(0.5, 0) did not throw an exception.","status":"PASS"},{"name":"  gain.gain.setValueAtTime(1.5, 0.25) did not throw an exception.","status":"PASS"},{"name":"  gain.gain.setValueCurveAtTime(..., 0.25, 0.25) did not throw an exception.","status":"PASS"},{"name":"  gain.gain.setValueAtTime(99, 0.5) did not throw an exception.","status":"PASS"},{"name":"  gain.gain.cancelScheduledValues(0.3) did not throw an exception.","status":"PASS"},{"name":"  gain.gain.setValueAtTime(3, 0.375) did not throw an exception.","status":"PASS"},{"name":"  output[0:1999] contains only the constant 0.5.","status":"PASS"},{"name":"  output[2000:2999] contains only the constant 1.5.","status":"PASS"},{"name":"  output[3000:] contains only the constant 3.","status":"PASS"},{"name":"< [cancel1] All assertions passed. (total 11 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 2 tasks ran successfully.","status":"PASS"}]}