{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"initialize\"","status":"PASS"},{"name":"Executing \"test value\"","status":"PASS"},{"name":"Executing \"test time\"","status":"PASS"},{"name":"Executing \"test setValueCurve\"","status":"PASS"},{"name":"Executing \"special cases 1\"","status":"PASS"},{"name":"Executing \"special cases 2\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [initialize] ","status":"PASS"},{"name":"  Creating context for testing did not throw an exception.","status":"PASS"},{"name":"< [initialize] All assertions passed. (total 1 assertions)","status":"PASS"},{"name":"> [test value] Test non-finite arguments for AudioParam value","status":"PASS"},{"name":"  gain.gain.setValueAtTime(Infinity,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.linearRampToValueAtTime(Infinity,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.exponentialRampToValueAtTime(Infinity,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(Infinity,1,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setValueAtTime(-Infinity,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.linearRampToValueAtTime(-Infinity,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.exponentialRampToValueAtTime(-Infinity,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(-Infinity,1,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setValueAtTime(NaN,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.linearRampToValueAtTime(NaN,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.exponentialRampToValueAtTime(NaN,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(NaN,1,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"< [test value] All assertions passed. (total 12 assertions)","status":"PASS"},{"name":"> [test time] Test non-finite arguments for AudioParam time","status":"PASS"},{"name":"  gain.gain.setValueAtTime(1,Infinity) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.linearRampToValueAtTime(1,Infinity) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.exponentialRampToValueAtTime(1,Infinity) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(1,Infinity,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(1,1,Infinity) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setValueAtTime(1,-Infinity) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.linearRampToValueAtTime(1,-Infinity) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.exponentialRampToValueAtTime(1,-Infinity) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(1,-Infinity,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(1,1,-Infinity) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setValueAtTime(1,NaN) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.linearRampToValueAtTime(1,NaN) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.exponentialRampToValueAtTime(1,NaN) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(1,NaN,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(1,1,NaN) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"< [test time] All assertions passed. (total 15 assertions)","status":"PASS"},{"name":"> [test setValueCurve] Test non-finite arguments for setValueCurveAtTime","status":"PASS"},{"name":"  gain.gain.setValueCurveAtTime([0,0,0],Infinity,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setValueCurveAtTime([0,0,0],-Infinity,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setValueCurveAtTime([0,0,0],NaN,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setValueCurveAtTime([1,2,Infinity,3],1,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"  gain.gain.setValueCurveAtTime([1,NaN,2,3],1,1) threw TypeError: \"this argument is not a finite floating-point value\".","status":"PASS"},{"name":"< [test setValueCurve] All assertions passed. (total 5 assertions)","status":"PASS"},{"name":"> [special cases 1] Test exceptions for finite values","status":"PASS"},{"name":"  gain.gain.setValueAtTime(1,-1) threw RangeError: \"start time -1 should not be negative\".","status":"PASS"},{"name":"  gain.gain.linearRampToValueAtTime(1,-1) threw RangeError: \"end time -1 should not be negative\".","status":"PASS"},{"name":"  gain.gain.exponentialRampToValueAtTime(1,-1) threw RangeError: \"end time -1 should not be negative\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(1,-1,1) threw RangeError: \"start time -1 should not be negative\".","status":"PASS"},{"name":"  gain.gain.setTargetAtTime(1,1,-1) threw RangeError: \"time constant -1 should not be negative\".","status":"PASS"},{"name":"  gain.gain.setValueCurveAtTime([0,0,0],-1,1) threw RangeError: \"start time -1 should not be negative\".","status":"PASS"},{"name":"  gain.gain.setValueCurveAtTime([0,0,0],1,-1) threw RangeError: \"end time -1 should not be negative\".","status":"PASS"},{"name":"X gain.gain.setValueCurveAtTime(curve, 1, 0) did not throw an exception.","status":"FAIL"},{"name":"  gain.gain.setValueCurveAtTime(curve, 1, -1) threw RangeError: \"end time -1 should not be negative\".","status":"PASS"},{"name":"< [special cases 1] 1 out of 9 assertions were failed.","status":"FAIL"},{"name":"> [special cases 2] Test special cases for expeonentialRamp","status":"PASS"},{"name":"  gain.gain.exponentialRampToValueAtTime(0,1) threw RangeError: \"target value 0 should not be 0\".","status":"PASS"},{"name":"  gain.gain.exponentialRampToValueAtTime(-1e-100,1) threw RangeError: \"target value 0 should not be 0\".","status":"PASS"},{"name":"  gain.gain.exponentialRampToValueAtTime(1e-100,1) threw RangeError: \"target value 0 should not be 0\".","status":"PASS"},{"name":"< [special cases 2] All assertions passed. (total 3 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 1 out of 6 tasks were failed.","status":"FAIL"}]}