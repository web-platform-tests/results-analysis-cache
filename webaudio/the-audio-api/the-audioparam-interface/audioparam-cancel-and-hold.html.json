{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"cancelTime\"","status":"PASS"},{"name":"Executing \"linear\"","status":"FAIL"},{"name":"Executing \"exponential\"","status":"FAIL"},{"name":"Executing \"setTarget\"","status":"FAIL"},{"name":"Executing \"setValueCurve\"","status":"FAIL"},{"name":"Executing \"setValueCurve after end\"","status":"FAIL"},{"name":"Executing \"initial setTarget\"","status":"FAIL"},{"name":"Executing \"post cancel: Linear\"","status":"FAIL"},{"name":"Executing \"post cancel: Exponential\"","status":"FAIL"},{"name":"Executing \"post cancel: ValueCurve\"","status":"FAIL"},{"name":"Executing \"post cancel: setTarget\"","status":"FAIL"},{"name":"Executing \"post cancel: setValue\"","status":"FAIL"},{"name":"Executing \"cancel future setTarget\"","status":"FAIL"},{"name":"Executing \"cancel setTarget now\"","status":"FAIL"},{"name":"Executing \"cancel future setValueCurve\"","status":"FAIL"},{"name":"Executing \"cancel setValueCurve now\"","status":"FAIL"},{"name":"Executing \"linear, cancel, linear, cancel, linear\"","status":"FAIL"},{"name":"Audit report","status":"PASS"},{"name":"> [cancelTime] Test Invalid Values","status":"PASS"},{"name":"X cancelAndHoldAtTime(-1) threw \"TypeError\" instead of EcmaScript error RangeError.","status":"FAIL"},{"name":"  cancelAndHoldAtTime(NaN) threw TypeError: \"src.offset.cancelAndHoldAtTime is not a function\".","status":"PASS"},{"name":"  cancelAndHoldAtTime(Infinity) threw TypeError: \"src.offset.cancelAndHoldAtTime is not a function\".","status":"PASS"},{"name":"< [cancelTime] 1 out of 3 assertions were failed.","status":"FAIL"},{"name":"> [linear] Cancel linearRampToValueAtTime","status":"PASS"},{"name":"> [exponential] Cancel exponentialRampAtTime","status":"PASS"},{"name":"> [setTarget] Cancel setTargetAtTime","status":"PASS"},{"name":"> [setValueCurve] Cancel setValueCurveAtTime","status":"PASS"},{"name":"> [setValueCurve after end] Cancel setValueCurveAtTime after the end","status":"PASS"},{"name":"> [initial setTarget] Cancel with initial setTargetAtTime","status":"PASS"},{"name":"> [post cancel: Linear] LinearRamp after cancelling","status":"PASS"},{"name":"> [post cancel: Exponential] ExponentialRamp after cancelling","status":"PASS"},{"name":"> [post cancel: ValueCurve] ","status":"PASS"},{"name":"> [post cancel: setTarget] ","status":"PASS"},{"name":"> [post cancel: setValue] ","status":"PASS"},{"name":"> [cancel future setTarget] ","status":"PASS"},{"name":"> [cancel setTarget now] ","status":"PASS"},{"name":"> [cancel future setValueCurve] ","status":"PASS"},{"name":"> [cancel setValueCurve now] ","status":"PASS"},{"name":"> [linear, cancel, linear, cancel, linear] Schedules 3 linear ramps, cancelling 2 of them, so that we end up with 2 cancel events next to each other","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 1 out of 17 tasks were failed.","status":"FAIL"}]}