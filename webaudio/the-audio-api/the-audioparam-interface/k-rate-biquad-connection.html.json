{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"Frequency AudioParam\"","status":"PASS"},{"name":"Executing \"Q AudioParam\"","status":"PASS"},{"name":"Executing \"Gain AudioParam\"","status":"PASS"},{"name":"Executing \"Detune AudioParam\"","status":"PASS"},{"name":"Executing \"All k-rate inputs\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [Frequency AudioParam] k-rate input works","status":"PASS"},{"name":"  frequency: new OscillatorNode(context, {frequency: 440}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"lowpass\",\"frequency\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.frequency.setValueAtTime(880,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.frequency.linearRampToValueAtTime.(0,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"lowpass\",\"frequency\":0}) did not throw an exception.","status":"PASS"},{"name":"  frequency: mod.offset.setValueAtTime(880,0) did not throw an exception.","status":"PASS"},{"name":"  frequency: mod.offset.linearRampToValueAtTime(0,0.125) did not throw an exception.","status":"PASS"},{"name":"  Expected k-rate frequency with automation output[0:2047] is not constantly 0 (contains 1023 different values).","status":"PASS"},{"name":"  Expected k-rate frequency with automation output[2048:] contains only the constant 0.","status":"PASS"},{"name":"  k-rate frequency with input: output[0,2048] equals [0,0.02839340642094612,0.1450495421886444,0.3694250285625458,0.6520540714263916,0.913143515586853,1.0783559083938599,1.1012732982635498,0.9707123041152954,0.7065789699554443,0.3498469591140747,-0.04851160943508148,-0.43676120042800903,-0.7688571214675903,-1.0084279775619507,-1.131049394607544...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate frequency with input: output[2048:] equals [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Frequency AudioParam] All assertions passed. (total 11 assertions)","status":"PASS"},{"name":"> [Q AudioParam] k-rate input works","status":"PASS"},{"name":"  Q: new OscillatorNode(context, {frequency: 1760}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"bandpass\",\"frequency\":440,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.Q.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.Q.linearRampToValueAtTime.(100,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"bandpass\",\"frequency\":440,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Q: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  Q: mod.offset.linearRampToValueAtTime(100,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate Q with input: output[0,2048] equals [0,0.9757020473480225,0.427555114030838,-0.7883464097976685,-0.7730104327201843,0.4496113359928131,0.970031201839447,-0.024541229009628296,-0.9807852506637573,-0.4052412807941437,0.8032074570655823,0.7572088241577148,-0.4713967442512512,-0.9637759923934937,0.049067676067352295,0.9852776527404785...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate Q with input: output[2048:] equals [0.0014363797381520271,0.002817157655954361,0.004582745488733053,0.0029107469599694014,-0.0010678413091227412,-0.0028669198509305716,-0.0014562688302248716,-0.0006699433433823287,-0.0030350638553500175,-0.00567975640296936,-0.0047274399548769,-0.0013245438458397985,0.00010962278611259535,-0.0013177333166822791,-0.0017317382153123617,0.0012720519443973899...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Q AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [Gain AudioParam] k-rate input works","status":"PASS"},{"name":"  gain: new OscillatorNode(context, {frequency: 1760}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"peaking\",\"frequency\":1760,\"Q\":100,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.gain.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.gain.linearRampToValueAtTime.(-100,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":1760,\"Q\":100,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  gain: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  gain: mod.offset.linearRampToValueAtTime(-100,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate gain with input: output[0,2048] equals [0,0.9757020473480225,0.427555114030838,-0.7883464097976685,-0.7730104327201843,0.4496113359928131,0.970031201839447,-0.024541229009628296,-0.9807852506637573,-0.4052412807941437,0.8032074570655823,0.7572088241577148,-0.4713967442512512,-0.9637759923934937,0.049067676067352295,0.9852776527404785...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate gain with input: output[2048:] equals [-2.1490196289164487e-8,0.000009718139153847005,0.000004286616331228288,-0.000007918917617644183,-0.0000077207068898133,0.000004496114797802875,0.000009689149919722695,-2.3618491695742705e-7,-0.000009817064892558847,-0.000004044286924909102,0.000008008218173927162,0.000007586809260828886,-0.000004744858870253665,-0.000009618586773285642,4.7250279067156953e-7,0.000009886378393275663...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Gain AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [Detune AudioParam] k-rate input works","status":"PASS"},{"name":"  detune: new OscillatorNode(context, {frequency: 440}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"lowpass\",\"frequency\":2200,\"detune\":0,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.detune.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.detune.linearRampToValueAtTime.(-13323.945370094427,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"lowpass\",\"frequency\":2200,\"detune\":0,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.linearRampToValueAtTime(-13323.945370094427,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate detune with input: output[0,2048] equals [0,0.12810896337032318,0.47732433676719666,0.8133140206336975,0.9599839448928833,0.9983930587768555,0.9618628025054932,0.8107287883758545,0.5545527338981628,0.24036027491092682,-0.09643323719501495,-0.424831748008728,-0.706647515296936,-0.9075677394866943,-1.0057729482650757,-0.9910215139389038...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate detune with input: output[2048:] equals [0.005761562380939722,0.005745327565819025,0.005729289725422859,0.005713616497814655,0.005698435474187136,0.00568381929770112,0.0056697772815823555,0.005656254943460226,0.005643140058964491,0.00563027523458004,0.005617475602775812,0.005604549311101437,0.005591319873929024,0.005577645730227232,0.005563436076045036,0.005548661574721336...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Detune AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [All k-rate inputs] ","status":"PASS"},{"name":"  Create: refNode = new BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":0,\"detune\":0,\"gain\":0,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Create: tstNode = new BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":0,\"detune\":0,\"gain\":0,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[frequency].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[frequency].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[Q].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[Q].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[gain].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[gain].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[detune].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[detune].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[frequency] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[frequency].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[Q] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[Q].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[gain] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[gain].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[detune] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[detune].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.frequency.setValueAtTime(1760, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[frequency].offset.setValueAtTime(1760, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.Q.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[Q].offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.gain.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[gain].offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.detune.setValueAtTime(4800, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[detune].offset.setValueAtTime(4800, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[frequency].linearRampToValueAtTime(440, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[frequency].offset.linearRampToValueAtTime(440, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[Q].linearRampToValueAtTime(40, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[Q].offset.linearRampToValueAtTime(40, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[gain].linearRampToValueAtTime(-100, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[gain].offset.linearRampToValueAtTime(-100, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[detune].linearRampToValueAtTime(0, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[detune].offset.linearRampToValueAtTime(0, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[frequency].connect(tstNode.frequency) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[Q].connect(tstNode.Q) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[gain].connect(tstNode.gain) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[detune].connect(tstNode.detune) did not throw an exception.","status":"PASS"},{"name":"  Start: mod[frequency].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[Q].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[gain].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[detune].start() did not throw an exception.","status":"PASS"},{"name":"  All k-rate AudioParams is not constantly 0 (contains 4094 different values).","status":"PASS"},{"name":"  All k-rate AudioParams equals [0,0.3311063051223755,0.6248594522476196,0.8481203317642212,0.9757020473480225,0.9932119846343994,0.898674488067627,0.7027547359466553,0.427555114030838,0.10412159562110901,-0.23105810582637787,-0.5401715040206909,-0.7883464097976685,-0.9475855231285095,-0.9999247193336487,-0.9394592046737671...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [All k-rate inputs] All assertions passed. (total 44 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 5 tasks ran successfully.","status":"PASS"}]}