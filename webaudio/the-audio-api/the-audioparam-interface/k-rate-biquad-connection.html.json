{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"Frequency AudioParam\"","status":"PASS"},{"name":"Executing \"Q AudioParam\"","status":"PASS"},{"name":"Executing \"Gain AudioParam\"","status":"PASS"},{"name":"Executing \"Detune AudioParam\"","status":"PASS"},{"name":"Executing \"All k-rate inputs\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [Frequency AudioParam] k-rate input works","status":"PASS"},{"name":"  frequency: new OscillatorNode(context, {frequency: 440}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"lowpass\",\"frequency\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.frequency.setValueAtTime(880,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.frequency.linearRampToValueAtTime.(0,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"lowpass\",\"frequency\":0}) did not throw an exception.","status":"PASS"},{"name":"  frequency: mod.offset.setValueAtTime(880,0) did not throw an exception.","status":"PASS"},{"name":"  frequency: mod.offset.linearRampToValueAtTime(0,0.125) did not throw an exception.","status":"PASS"},{"name":"  Expected k-rate frequency with automation output[0:2047] is not constantly 0 (contains 1023 different values).","status":"PASS"},{"name":"  Expected k-rate frequency with automation output[2048:] contains only the constant 0.","status":"PASS"},{"name":"  k-rate frequency with input: output[0,2048] equals [0,0.028393402695655823,0.1450495421886444,0.3694250285625458,0.6520540714263916,0.913143515586853,1.0783560276031494,1.1012734174728394,0.970712423324585,0.7065790295600891,0.3498469889163971,-0.04851160943508148,-0.43676117062568665,-0.7688571214675903,-1.0084279775619507,-1.1310492753982544...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate frequency with input: output[2048:] equals [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Frequency AudioParam] All assertions passed. (total 11 assertions)","status":"PASS"},{"name":"> [Q AudioParam] k-rate input works","status":"PASS"},{"name":"  Q: new OscillatorNode(context, {frequency: 1760}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"bandpass\",\"frequency\":440,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.Q.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.Q.linearRampToValueAtTime.(100,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"bandpass\",\"frequency\":440,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Q: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  Q: mod.offset.linearRampToValueAtTime(100,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate Q with input: output[0,2048] equals [0,0.9757021069526672,0.4275550842285156,-0.7883463501930237,-0.7730104327201843,0.4496113359928131,0.9700312614440918,-0.024541160091757774,-0.9807853102684021,-0.4052412807941437,0.8032075762748718,0.7572088241577148,-0.47139671444892883,-0.963776171207428,0.04906771704554558,0.9852775931358337...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate Q with input: output[2048:] equals [0.0014363835798576474,0.0028171613812446594,0.004582748282700777,0.0029107488226145506,-0.001067840727046132,-0.002866920782253146,-0.0014562710421159863,-0.0006699464865960181,-0.0030350678134709597,-0.005679761059582233,-0.004727444611489773,-0.0013245478039607406,0.00010961972293443978,-0.0013177355285733938,-0.0017317392630502582,0.0012720524100586772...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Q AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [Gain AudioParam] k-rate input works","status":"PASS"},{"name":"  gain: new OscillatorNode(context, {frequency: 1760}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"peaking\",\"frequency\":1760,\"Q\":100,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.gain.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.gain.linearRampToValueAtTime.(-100,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":1760,\"Q\":100,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  gain: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  gain: mod.offset.linearRampToValueAtTime(-100,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate gain with input: output[0,2048] equals [0,0.9757021069526672,0.4275550842285156,-0.7883463501930237,-0.7730104327201843,0.4496113359928131,0.9700312614440918,-0.024541160091757774,-0.9807853102684021,-0.4052412807941437,0.8032075762748718,0.7572088241577148,-0.47139671444892883,-0.963776171207428,0.04906771704554558,0.9852775931358337...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate gain with input: output[2048:] equals [-1.728800569367195e-8,0.000009792811397346668,0.000004278388587408699,-0.00000785237625677837,-0.000007732985977781937,0.000004531640115601476,0.00000971609006228391,-2.0712640491638012e-7,-0.000009818181752052624,-0.000004000900844403077,0.000008038896339712664,0.000007580810688523343,-0.000004680739948526025,-0.000009684275028121192,5.335197101885569e-7,0.000009782043889572378...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Gain AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [Detune AudioParam] k-rate input works","status":"PASS"},{"name":"  detune: new OscillatorNode(context, {frequency: 440}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"lowpass\",\"frequency\":2200,\"detune\":0,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.detune.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.detune.linearRampToValueAtTime.(-13323.945370094427,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"lowpass\",\"frequency\":2200,\"detune\":0,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.linearRampToValueAtTime(-13323.945370094427,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate detune with input: output[0,2048] equals [0,0.12810896337032318,0.47732430696487427,0.8133140206336975,0.9599839448928833,0.9983930587768555,0.9618628621101379,0.8107287883758545,0.5545526742935181,0.24036026000976562,-0.09643319249153137,-0.42483168840408325,-0.7066474556922913,-0.9075677394866943,-1.0057729482650757,-0.9910215139389038...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate detune with input: output[2048:] equals [0.005765496287494898,0.005749266594648361,0.005733234342187643,0.0057175662368535995,0.00570239033550024,0.005687779281288385,0.005673742387443781,0.005660225171595812,0.005647115409374237,0.005634256172925234,0.005621461197733879,0.005608540028333664,0.0055953157134354115,0.005581646226346493,0.0055674416944384575,0.005552671849727631...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Detune AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [All k-rate inputs] ","status":"PASS"},{"name":"  Create: refNode = new BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":0,\"detune\":0,\"gain\":0,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Create: tstNode = new BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":0,\"detune\":0,\"gain\":0,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[frequency].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[frequency].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[Q].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[Q].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[gain].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[gain].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[detune].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[detune].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[frequency] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[frequency].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[Q] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[Q].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[gain] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[gain].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[detune] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[detune].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.frequency.setValueAtTime(1760, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[frequency].offset.setValueAtTime(1760, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.Q.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[Q].offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.gain.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[gain].offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.detune.setValueAtTime(4800, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[detune].offset.setValueAtTime(4800, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[frequency].linearRampToValueAtTime(440, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[frequency].offset.linearRampToValueAtTime(440, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[Q].linearRampToValueAtTime(40, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[Q].offset.linearRampToValueAtTime(40, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[gain].linearRampToValueAtTime(-100, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[gain].offset.linearRampToValueAtTime(-100, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[detune].linearRampToValueAtTime(0, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[detune].offset.linearRampToValueAtTime(0, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[frequency].connect(tstNode.frequency) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[Q].connect(tstNode.Q) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[gain].connect(tstNode.gain) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[detune].connect(tstNode.detune) did not throw an exception.","status":"PASS"},{"name":"  Start: mod[frequency].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[Q].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[gain].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[detune].start() did not throw an exception.","status":"PASS"},{"name":"  All k-rate AudioParams is not constantly 0 (contains 4094 different values).","status":"PASS"},{"name":"  All k-rate AudioParams equals [0,0.3311062753200531,0.6248594522476196,0.8481202721595764,0.9757021069526672,0.9932120442390442,0.898674488067627,0.7027547359466553,0.4275550842285156,0.1041216179728508,-0.2310580611228943,-0.5401714444160461,-0.7883463501930237,-0.9475855827331543,-0.9999246597290039,-0.9394592046737671...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [All k-rate inputs] All assertions passed. (total 44 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 5 tasks ran successfully.","status":"PASS"}]}