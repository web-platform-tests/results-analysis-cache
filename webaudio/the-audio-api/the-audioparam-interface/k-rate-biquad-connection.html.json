{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"Frequency AudioParam\"","status":"PASS"},{"name":"Executing \"Q AudioParam\"","status":"PASS"},{"name":"Executing \"Gain AudioParam\"","status":"PASS"},{"name":"Executing \"Detune AudioParam\"","status":"PASS"},{"name":"Executing \"All k-rate inputs\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [Frequency AudioParam] k-rate input works","status":"PASS"},{"name":"  frequency: new OscillatorNode(context, {frequency: 440}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"lowpass\",\"frequency\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.frequency.setValueAtTime(880,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.frequency.linearRampToValueAtTime.(0,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"lowpass\",\"frequency\":0}) did not throw an exception.","status":"PASS"},{"name":"  frequency: mod.offset.setValueAtTime(880,0) did not throw an exception.","status":"PASS"},{"name":"  frequency: mod.offset.linearRampToValueAtTime(0,0.125) did not throw an exception.","status":"PASS"},{"name":"  Expected k-rate frequency with automation output[0:2047] is not constantly 0 (contains 1023 different values).","status":"PASS"},{"name":"  Expected k-rate frequency with automation output[2048:] contains only the constant 0.","status":"PASS"},{"name":"  k-rate frequency with input: output[0,2048] equals [0,0.02839340642094612,0.1450495570898056,0.36942505836486816,0.6520541310310364,0.9131435751914978,1.0783559083938599,1.1012734174728394,0.9707123637199402,0.7065789699554443,0.3498469293117523,-0.048511650413274765,-0.4367612302303314,-0.7688571810722351,-1.0084279775619507,-1.131049394607544...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate frequency with input: output[2048:] equals [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Frequency AudioParam] All assertions passed. (total 11 assertions)","status":"PASS"},{"name":"> [Q AudioParam] k-rate input works","status":"PASS"},{"name":"  Q: new OscillatorNode(context, {frequency: 1760}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"bandpass\",\"frequency\":440,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.Q.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.Q.linearRampToValueAtTime.(100,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"bandpass\",\"frequency\":440,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Q: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  Q: mod.offset.linearRampToValueAtTime(100,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate Q with input: output[0,2048] equals [0,0.9757021069526672,0.42755505442619324,-0.7883464694023132,-0.7730104327201843,0.44961124658584595,0.9700312614440918,-0.02454114705324173,-0.9807852506637573,-0.40524137020111084,0.8032073974609375,0.7572090029716492,-0.4713965654373169,-0.9637761116027832,0.049067337065935135,0.9852775931358337...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate Q with input: output[2048:] equals [0.0014364073285833001,0.0028170794248580933,0.004582726396620274,0.002910856856033206,-0.0010677410755306482,-0.0028669643215835094,-0.0014563807053491473,-0.0006699542864225805,-0.0030349770095199347,-0.00567973917350173,-0.0047275591641664505,-0.001324656535871327,0.00010965065303025767,-0.0013176443753764033,-0.001731753465719521,0.0012719426304101944...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Q AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [Gain AudioParam] k-rate input works","status":"PASS"},{"name":"  gain: new OscillatorNode(context, {frequency: 1760}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"peaking\",\"frequency\":1760,\"Q\":100,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.gain.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.gain.linearRampToValueAtTime.(-100,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":1760,\"Q\":100,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  gain: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  gain: mod.offset.linearRampToValueAtTime(-100,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate gain with input: output[0,2048] equals [0,0.9757021069526672,0.42755505442619324,-0.7883464694023132,-0.7730104327201843,0.44961124658584595,0.9700312614440918,-0.02454114705324173,-0.9807852506637573,-0.40524137020111084,0.8032073974609375,0.7572090029716492,-0.4713965654373169,-0.9637761116027832,0.049067337065935135,0.9852775931358337...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate gain with input: output[2048:] equals [4.905524431109143e-9,0.00000974608428805368,0.00000433861396231805,-0.000007887544597906526,-0.000007714542334724683,0.0000044417879507818725,0.000009715608939586673,-2.6210787495983823e-7,-0.000009817711543291807,-0.000004047315087518655,0.00000798177279648371,0.0000076239575719228014,-0.0000047379935494973324,-0.000009627005965739954,4.243582338858687e-7,0.00000986783743428532...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Gain AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [Detune AudioParam] k-rate input works","status":"PASS"},{"name":"  detune: new OscillatorNode(context, {frequency: 440}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"lowpass\",\"frequency\":2200,\"detune\":0,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.detune.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.detune.linearRampToValueAtTime.(-13323.945370094427,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"lowpass\",\"frequency\":2200,\"detune\":0,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.linearRampToValueAtTime(-13323.945370094427,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate detune with input: output[0,2048] equals [0,0.12810896337032318,0.47732436656951904,0.8133140802383423,0.9599840044975281,0.9983929991722107,0.9618627429008484,0.8107287883758545,0.5545527338981628,0.24036024510860443,-0.09643325209617615,-0.424831748008728,-0.7066475749015808,-0.9075677990913391,-1.0057729482650757,-0.9910215139389038...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate detune with input: output[2048:] equals [0.005767383147031069,0.005751155782490969,0.0057351249270141125,0.0057194591499865055,0.0057042851112782955,0.0056896754540503025,0.005675640422850847,0.005662125069648027,0.005649017635732889,0.005636159796267748,0.00562336714938283,0.005610447842627764,0.005597224924713373,0.005583557765930891,0.005569355096668005,0.005554587114602327...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Detune AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [All k-rate inputs] ","status":"PASS"},{"name":"  Create: refNode = new BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":0,\"detune\":0,\"gain\":0,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Create: tstNode = new BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":0,\"detune\":0,\"gain\":0,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[frequency].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[frequency].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[Q].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[Q].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[gain].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[gain].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[detune].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[detune].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[frequency] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[frequency].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[Q] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[Q].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[gain] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[gain].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[detune] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[detune].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.frequency.setValueAtTime(1760, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[frequency].offset.setValueAtTime(1760, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.Q.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[Q].offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.gain.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[gain].offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.detune.setValueAtTime(4800, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[detune].offset.setValueAtTime(4800, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[frequency].linearRampToValueAtTime(440, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[frequency].offset.linearRampToValueAtTime(440, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[Q].linearRampToValueAtTime(40, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[Q].offset.linearRampToValueAtTime(40, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[gain].linearRampToValueAtTime(-100, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[gain].offset.linearRampToValueAtTime(-100, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[detune].linearRampToValueAtTime(0, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[detune].offset.linearRampToValueAtTime(0, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[frequency].connect(tstNode.frequency) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[Q].connect(tstNode.Q) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[gain].connect(tstNode.gain) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[detune].connect(tstNode.detune) did not throw an exception.","status":"PASS"},{"name":"  Start: mod[frequency].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[Q].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[gain].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[detune].start() did not throw an exception.","status":"PASS"},{"name":"  All k-rate AudioParams is not constantly 0 (contains 4095 different values).","status":"PASS"},{"name":"  All k-rate AudioParams equals [0,0.3311063051223755,0.6248595118522644,0.8481203317642212,0.9757021069526672,0.9932119250297546,0.8986744284629822,0.7027547359466553,0.42755505442619324,0.1041216030716896,-0.23105813562870026,-0.5401715040206909,-0.7883464694023132,-0.9475855827331543,-0.9999247193336487,-0.9394592046737671...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [All k-rate inputs] All assertions passed. (total 44 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 5 tasks ran successfully.","status":"PASS"}]}