{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"Frequency AudioParam\"","status":"PASS"},{"name":"Executing \"Q AudioParam\"","status":"PASS"},{"name":"Executing \"Gain AudioParam\"","status":"PASS"},{"name":"Executing \"Detune AudioParam\"","status":"PASS"},{"name":"Executing \"All k-rate inputs\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [Frequency AudioParam] k-rate input works","status":"PASS"},{"name":"  frequency: new OscillatorNode(context, {frequency: 440}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"lowpass\",\"frequency\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.frequency.setValueAtTime(880,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.frequency.linearRampToValueAtTime.(0,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"lowpass\",\"frequency\":0}) did not throw an exception.","status":"PASS"},{"name":"  frequency: mod.offset.setValueAtTime(880,0) did not throw an exception.","status":"PASS"},{"name":"  frequency: mod.offset.linearRampToValueAtTime(0,0.125) did not throw an exception.","status":"PASS"},{"name":"  Expected k-rate frequency with automation output[0:2047] is not constantly 0 (contains 1023 different values).","status":"PASS"},{"name":"  Expected k-rate frequency with automation output[2048:] contains only the constant 0.","status":"PASS"},{"name":"  k-rate frequency with input: output[0,2048] equals [0,0.02839340642094612,0.1450495570898056,0.36942505836486816,0.6520541310310364,0.9131435751914978,1.0783560276031494,1.1012734174728394,0.9707123637199402,0.7065789699554443,0.34984689950942993,-0.048511676490306854,-0.4367612302303314,-0.7688571214675903,-1.0084279775619507,-1.131049394607544...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate frequency with input: output[2048:] equals [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Frequency AudioParam] All assertions passed. (total 11 assertions)","status":"PASS"},{"name":"> [Q AudioParam] k-rate input works","status":"PASS"},{"name":"  Q: new OscillatorNode(context, {frequency: 1760}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"bandpass\",\"frequency\":440,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.Q.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.Q.linearRampToValueAtTime.(100,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"bandpass\",\"frequency\":440,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Q: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  Q: mod.offset.linearRampToValueAtTime(100,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate Q with input: output[0,2048] equals [0,0.975702166557312,0.42755502462387085,-0.7883464097976685,-0.7730104327201843,0.4496113359928131,0.9700312614440918,-0.024541229009628296,-0.9807852506637573,-0.4052412509918213,0.803207516670227,0.7572088241577148,-0.4713967740535736,-0.9637760519981384,0.049067676067352295,0.9852775931358337...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate Q with input: output[2048:] equals [0.0014363807858899236,0.002817156258970499,0.004582741763442755,0.00291074113920331,-0.0010678484104573727,-0.002866927534341812,-0.0014562761643901467,-0.0006699494551867247,-0.003035068279132247,-0.005679758731275797,-0.0047274399548769,-0.001324541517533362,0.00010962702799588442,-0.0013177278451621532,-0.0017317320453003049,0.0012720581144094467...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Q AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [Gain AudioParam] k-rate input works","status":"PASS"},{"name":"  gain: new OscillatorNode(context, {frequency: 1760}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"peaking\",\"frequency\":1760,\"Q\":100,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.gain.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.gain.linearRampToValueAtTime.(-100,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":1760,\"Q\":100,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  gain: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  gain: mod.offset.linearRampToValueAtTime(-100,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate gain with input: output[0,2048] equals [0,0.975702166557312,0.42755502462387085,-0.7883464097976685,-0.7730104327201843,0.4496113359928131,0.9700312614440918,-0.024541229009628296,-0.9807852506637573,-0.4052412509918213,0.803207516670227,0.7572088241577148,-0.4713967740535736,-0.9637760519981384,0.049067676067352295,0.9852775931358337...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate gain with input: output[2048:] equals [-2.180405367369076e-8,0.0000098055497801397,0.000004245905984134879,-0.00000784498388384236,-0.00000775181433709804,0.000004506532150116982,0.000009707744538900442,-2.410281467746245e-7,-0.000009790486728888936,-0.000004029018782603089,0.000008034825441427529,0.0000075961002039548475,-0.000004725856342702173,-0.000009631631655793171,4.7286130211432464e-7,0.000009836770004767459...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Gain AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [Detune AudioParam] k-rate input works","status":"PASS"},{"name":"  detune: new OscillatorNode(context, {frequency: 440}) did not throw an exception.","status":"PASS"},{"name":"  Reference BiquadFilterNode(c, {\"type\":\"lowpass\",\"frequency\":2200,\"detune\":0,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  refNode.detune.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  refNode.detune.linearRampToValueAtTime.(-13323.945370094427,0.125) did not throw an exception.","status":"PASS"},{"name":"  Test BiquadFilterNode(context, {\"type\":\"lowpass\",\"frequency\":2200,\"detune\":0,\"gain\":0}) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.setValueAtTime(0,0) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.linearRampToValueAtTime(-13323.945370094427,0.125) did not throw an exception.","status":"PASS"},{"name":"  k-rate detune with input: output[0,2048] equals [0,0.12810896337032318,0.47732436656951904,0.8133140802383423,0.9599840044975281,0.9983930587768555,0.9618627429008484,0.8107287287712097,0.5545527338981628,0.24036024510860443,-0.09643324464559555,-0.42483171820640564,-0.706647515296936,-0.9075677394866943,-1.0057729482650757,-0.991021454334259...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"  k-rate detune with input: output[2048:] equals [0.0057615903206169605,0.0057453555054962635,0.005729317665100098,0.005713644437491894,0.005698463413864374,0.005683847237378359,0.005669805221259594,0.0056562828831374645,0.005643167998641729,0.0056303031742572784,0.005617503542453051,0.005604577250778675,0.005591347813606262,0.0055776736699044704,0.005563464015722275,0.005548689514398575...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [Detune AudioParam] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [All k-rate inputs] ","status":"PASS"},{"name":"  Create: refNode = new BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":0,\"detune\":0,\"gain\":0,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Create: tstNode = new BiquadFilterNode(context, {\"type\":\"peaking\",\"frequency\":0,\"detune\":0,\"gain\":0,\"Q\":0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[frequency].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[frequency].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[Q].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[Q].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[gain].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[gain].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: refNode[detune].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Set rate: tstNode[detune].automationRate = 'k-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[frequency] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[frequency].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[Q] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[Q].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[gain] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[gain].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Create: mod[detune] = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  Set rate: mod[detune].offset.automationRate = 'a-rate' did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.frequency.setValueAtTime(1760, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[frequency].offset.setValueAtTime(1760, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.Q.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[Q].offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.gain.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[gain].offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: refNode.detune.setValueAtTime(4800, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 0: mod[detune].offset.setValueAtTime(4800, 0) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[frequency].linearRampToValueAtTime(440, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[frequency].offset.linearRampToValueAtTime(440, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[Q].linearRampToValueAtTime(40, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[Q].offset.linearRampToValueAtTime(40, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[gain].linearRampToValueAtTime(-100, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[gain].offset.linearRampToValueAtTime(-100, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: refNode[detune].linearRampToValueAtTime(0, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Automate 1: mod[detune].offset.linearRampToValueAtTime(0, 0.125) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[frequency].connect(tstNode.frequency) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[Q].connect(tstNode.Q) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[gain].connect(tstNode.gain) did not throw an exception.","status":"PASS"},{"name":"  Connect: mod[detune].connect(tstNode.detune) did not throw an exception.","status":"PASS"},{"name":"  Start: mod[frequency].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[Q].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[gain].start() did not throw an exception.","status":"PASS"},{"name":"  Start: mod[detune].start() did not throw an exception.","status":"PASS"},{"name":"  All k-rate AudioParams is not constantly 0 (contains 4094 different values).","status":"PASS"},{"name":"  All k-rate AudioParams equals [0,0.3311063051223755,0.6248595118522644,0.8481203317642212,0.975702166557312,0.9932119250297546,0.8986744284629822,0.7027547359466553,0.42755502462387085,0.1041216254234314,-0.23105812072753906,-0.5401714444160461,-0.7883464097976685,-0.9475856423377991,-0.9999246597290039,-0.9394591450691223...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [All k-rate inputs] All assertions passed. (total 44 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 5 tasks ran successfully.","status":"PASS"}]}