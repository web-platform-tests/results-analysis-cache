{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"attack\"","status":"PASS"},{"name":"Executing \"knee\"","status":"PASS"},{"name":"Executing \"ratio\"","status":"PASS"},{"name":"Executing \"release\"","status":"PASS"},{"name":"Executing \"threshold\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [attack] Dynamics compressor attack","status":"PASS"},{"name":"  attack: refNode = new DynamicsCompressorNode(context) did not throw an exception.","status":"PASS"},{"name":"  attack: tstNode = new DynamicsCompressorNode(context, {\"attack\":0}) did not throw an exception.","status":"PASS"},{"name":"  attack: refNode[attack].setValueAtTime(refNode[attack].minValue, 0) did not throw an exception.","status":"PASS"},{"name":"  attack: refNode[attack].linearRampToValueAtTime(refNode[attack].minValue, 0.25) did not throw an exception.","status":"PASS"},{"name":"  attack: mod = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  attack: mod.offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  attack: mod.offset.linearRampToValueAtTime(1, 0.25) did not throw an exception.","status":"PASS"},{"name":"  attack: mod.connect(tstNode[attack]) did not throw an exception.","status":"PASS"},{"name":"  k-rate attack AudioParam with input equals [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [attack] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [knee] Dynamics compressor knee","status":"PASS"},{"name":"  knee: refNode = new DynamicsCompressorNode(context) did not throw an exception.","status":"PASS"},{"name":"  knee: tstNode = new DynamicsCompressorNode(context, {\"knee\":0}) did not throw an exception.","status":"PASS"},{"name":"  knee: refNode[knee].setValueAtTime(refNode[knee].minValue, 0) did not throw an exception.","status":"PASS"},{"name":"  knee: refNode[knee].linearRampToValueAtTime(refNode[knee].minValue, 0.25) did not throw an exception.","status":"PASS"},{"name":"  knee: mod = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  knee: mod.offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  knee: mod.offset.linearRampToValueAtTime(40, 0.25) did not throw an exception.","status":"PASS"},{"name":"  knee: mod.connect(tstNode[knee]) did not throw an exception.","status":"PASS"},{"name":"  k-rate knee AudioParam with input equals [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [knee] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [ratio] Dynamics compressor ratio","status":"PASS"},{"name":"  ratio: refNode = new DynamicsCompressorNode(context) did not throw an exception.","status":"PASS"},{"name":"  ratio: tstNode = new DynamicsCompressorNode(context, {\"ratio\":1}) did not throw an exception.","status":"PASS"},{"name":"  ratio: refNode[ratio].setValueAtTime(refNode[ratio].minValue, 0) did not throw an exception.","status":"PASS"},{"name":"  ratio: refNode[ratio].linearRampToValueAtTime(refNode[ratio].minValue, 0.25) did not throw an exception.","status":"PASS"},{"name":"  ratio: mod = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  ratio: mod.offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  ratio: mod.offset.linearRampToValueAtTime(19, 0.25) did not throw an exception.","status":"PASS"},{"name":"  ratio: mod.connect(tstNode[ratio]) did not throw an exception.","status":"PASS"},{"name":"  k-rate ratio AudioParam with input equals [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [ratio] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [release] Dynamics compressor release","status":"PASS"},{"name":"  release: refNode = new DynamicsCompressorNode(context) did not throw an exception.","status":"PASS"},{"name":"  release: tstNode = new DynamicsCompressorNode(context, {\"release\":0}) did not throw an exception.","status":"PASS"},{"name":"  release: refNode[release].setValueAtTime(refNode[release].minValue, 0) did not throw an exception.","status":"PASS"},{"name":"  release: refNode[release].linearRampToValueAtTime(refNode[release].minValue, 0.25) did not throw an exception.","status":"PASS"},{"name":"  release: mod = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  release: mod.offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  release: mod.offset.linearRampToValueAtTime(1, 0.25) did not throw an exception.","status":"PASS"},{"name":"  release: mod.connect(tstNode[release]) did not throw an exception.","status":"PASS"},{"name":"  k-rate release AudioParam with input equals [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [release] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"> [threshold] Dynamics compressor threshold","status":"PASS"},{"name":"  threshold: refNode = new DynamicsCompressorNode(context) did not throw an exception.","status":"PASS"},{"name":"  threshold: tstNode = new DynamicsCompressorNode(context, {\"threshold\":-100}) did not throw an exception.","status":"PASS"},{"name":"  threshold: refNode[threshold].setValueAtTime(refNode[threshold].minValue, 0) did not throw an exception.","status":"PASS"},{"name":"  threshold: refNode[threshold].linearRampToValueAtTime(refNode[threshold].minValue, 0.25) did not throw an exception.","status":"PASS"},{"name":"  threshold: mod = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  threshold: mod.offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  threshold: mod.offset.linearRampToValueAtTime(100, 0.25) did not throw an exception.","status":"PASS"},{"name":"  threshold: mod.connect(tstNode[threshold]) did not throw an exception.","status":"PASS"},{"name":"  k-rate threshold AudioParam with input equals [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [threshold] All assertions passed. (total 9 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 5 tasks ran successfully.","status":"PASS"}]}