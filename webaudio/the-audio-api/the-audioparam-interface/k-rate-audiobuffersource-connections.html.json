{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"playbackRate\"","status":"PASS"},{"name":"Executing \"detune\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [playbackRate] AudioBufferSource playbackRate","status":"PASS"},{"name":"  playbackRate: refNode = new AudioBufferSourceNode(context, {\"buffer\":{}}) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: tstNode = new AudioBufferSourceNode(context, {\"buffer\":{}}) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: refNode[playbackRate].setValueAtTime(1, 0) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: refNode[playbackRate].linearRampToValueAtTime(2, 0.25) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: mod = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: mod.offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: mod.offset.linearRampToValueAtTime(1, 0.25) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: mod.connect(tstNode[playbackRate]) did not throw an exception.","status":"PASS"},{"name":"  Expected k-rate playbackRate AudioParam with input is not constantly 0 (contains 1491 different values).","status":"PASS"},{"name":"  Actual k-rate playbackRate AudioParam with input is not constantly 0 (contains 1491 different values).","status":"PASS"},{"name":"  k-rate playbackRate AudioParam with input equals [0,0.0005000000237487257,0.0010000000474974513,0.001500000013038516,0.0020000000949949026,0.0024999999441206455,0.003000000026077032,0.0035000001080334187,0.004000000189989805,0.0044999998062849045,0.004999999888241291,0.005499999970197678,0.006000000052154064,0.006500000134110451,0.007000000216066837,0.007499999832361937...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [playbackRate] All assertions passed. (total 11 assertions)","status":"PASS"},{"name":"> [detune] AudioBufferSource detune","status":"PASS"},{"name":"  detune: refNode = new AudioBufferSourceNode(context, {\"buffer\":{}}) did not throw an exception.","status":"PASS"},{"name":"  detune: tstNode = new AudioBufferSourceNode(context, {\"buffer\":{}}) did not throw an exception.","status":"PASS"},{"name":"  detune: refNode[detune].setValueAtTime(-1200, 0) did not throw an exception.","status":"PASS"},{"name":"  detune: refNode[detune].linearRampToValueAtTime(1200, 0.25) did not throw an exception.","status":"PASS"},{"name":"  detune: mod = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.setValueAtTime(-1200, 0) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.linearRampToValueAtTime(1200, 0.25) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.connect(tstNode[detune]) did not throw an exception.","status":"PASS"},{"name":"  Expected k-rate detune AudioParam with input is not constantly 0 (contains 1961 different values).","status":"PASS"},{"name":"  Actual k-rate detune AudioParam with input is not constantly 0 (contains 1961 different values).","status":"PASS"},{"name":"  k-rate detune AudioParam with input equals [0,0.0002500000118743628,0.0005000000237487257,0.000750000006519258,0.0010000000474974513,0.0012499999720603228,0.001500000013038516,0.0017500000540167093,0.0020000000949949026,0.0022499999031424522,0.0024999999441206455,0.002749999985098839,0.003000000026077032,0.0032500000670552254,0.0035000001080334187,0.003750000149011612...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [detune] All assertions passed. (total 11 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 2 tasks ran successfully.","status":"PASS"}]}