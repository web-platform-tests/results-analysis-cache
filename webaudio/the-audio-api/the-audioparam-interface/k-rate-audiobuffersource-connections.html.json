{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"playbackRate\"","status":"PASS"},{"name":"Executing \"detune\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [playbackRate] AudioBufferSource playbackRate","status":"PASS"},{"name":"  playbackRate: refNode = new AudioBufferSourceNode(context, {\"buffer\":{}}) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: tstNode = new AudioBufferSourceNode(context, {\"buffer\":{}}) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: refNode[playbackRate].setValueAtTime(1, 0) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: refNode[playbackRate].linearRampToValueAtTime(2, 0.25) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: mod = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: mod.offset.setValueAtTime(0, 0) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: mod.offset.linearRampToValueAtTime(1, 0.25) did not throw an exception.","status":"PASS"},{"name":"  playbackRate: mod.connect(tstNode[playbackRate]) did not throw an exception.","status":"PASS"},{"name":"  Expected k-rate playbackRate AudioParam with input is not constantly 0 (contains 1495 different values).","status":"PASS"},{"name":"  Actual k-rate playbackRate AudioParam with input is not constantly 0 (contains 1495 different values).","status":"PASS"},{"name":"  k-rate playbackRate AudioParam with input equals [0,0.0005000000237487257,0.0010000000474974513,0.001500000013038516,0.0020000000949949026,0.0024999999441206455,0.003000000026077032,0.0035000001080334187,0.004000000189989805,0.0044999998062849045,0.004999999888241291,0.005499999970197678,0.006000000052154064,0.006500000134110451,0.007000000216066837,0.007499999832361937...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [playbackRate] All assertions passed. (total 11 assertions)","status":"PASS"},{"name":"> [detune] AudioBufferSource detune","status":"PASS"},{"name":"  detune: refNode = new AudioBufferSourceNode(context, {\"buffer\":{}}) did not throw an exception.","status":"PASS"},{"name":"  detune: tstNode = new AudioBufferSourceNode(context, {\"buffer\":{}}) did not throw an exception.","status":"PASS"},{"name":"  detune: refNode[detune].setValueAtTime(-1200, 0) did not throw an exception.","status":"PASS"},{"name":"  detune: refNode[detune].linearRampToValueAtTime(1200, 0.25) did not throw an exception.","status":"PASS"},{"name":"  detune: mod = new ConstantSourceNode(context, {offset: 0}) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.setValueAtTime(-1200, 0) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.offset.linearRampToValueAtTime(1200, 0.25) did not throw an exception.","status":"PASS"},{"name":"  detune: mod.connect(tstNode[detune]) did not throw an exception.","status":"PASS"},{"name":"  Expected k-rate detune AudioParam with input is not constantly 0 (contains 1966 different values).","status":"PASS"},{"name":"  Actual k-rate detune AudioParam with input is not constantly 0 (contains 1966 different values).","status":"PASS"},{"name":"  k-rate detune AudioParam with input equals [0.000020639221474993974,0.0002110920613631606,0.00048582113231532276,0.000758705718908459,0.0010079719359055161,0.001250003115274012,0.0015005100285634398,0.001750138821080327,0.0020014550536870956,0.002250178251415491,0.002502400428056717,0.002750217914581299,0.003003345336765051,0.00325025781057775,0.003504290245473385,0.003750297473743558...] with an element-wise tolerance of {\"absoluteThreshold\":0,\"relativeThreshold\":0}.","status":"PASS"},{"name":"< [detune] All assertions passed. (total 11 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 2 tasks ran successfully.","status":"PASS"}]}