{"status":"OK","subtests":[{"name":"# AUDIT TASK RUNNER STARTED.","status":"PASS"},{"name":"Executing \"initialize\"","status":"PASS"},{"name":"Executing \"invalid constructor\"","status":"PASS"},{"name":"Executing \"default constructor\"","status":"PASS"},{"name":"Executing \"test AudioNodeOptions\"","status":"PASS"},{"name":"Executing \"constructor with options\"","status":"PASS"},{"name":"Executing \"construct invalid options\"","status":"PASS"},{"name":"Executing \"setting min/max\"","status":"PASS"},{"name":"Audit report","status":"PASS"},{"name":"> [initialize] ","status":"PASS"},{"name":"  context = new OfflineAudioContext(...) did not throw an exception.","status":"PASS"},{"name":"< [initialize] All assertions passed. (total 1 assertions)","status":"PASS"},{"name":"> [invalid constructor] ","status":"PASS"},{"name":"  new AnalyserNode() threw TypeError: \"Not enough arguments\".","status":"PASS"},{"name":"  new AnalyserNode(1) threw TypeError: \"Argument 1 ('context') to the AnalyserNode constructor must be an instance of BaseAudioContext\".","status":"PASS"},{"name":"  new AnalyserNode(context, 42) threw TypeError: \"Type error\".","status":"PASS"},{"name":"< [invalid constructor] All assertions passed. (total 3 assertions)","status":"PASS"},{"name":"> [default constructor] ","status":"PASS"},{"name":"  node0 = new AnalyserNode(context) did not throw an exception.","status":"PASS"},{"name":"  node0 instanceof AnalyserNode is equal to true.","status":"PASS"},{"name":"  node0.numberOfInputs is equal to 1.","status":"PASS"},{"name":"  node0.numberOfOutputs is equal to 1.","status":"PASS"},{"name":"  node0.channelCount is equal to 2.","status":"PASS"},{"name":"  node0.channelCountMode is equal to max.","status":"PASS"},{"name":"  node0.channelInterpretation is equal to speakers.","status":"PASS"},{"name":"  node0.fftSize is equal to 2048.","status":"PASS"},{"name":"  node0.frequencyBinCount is equal to 1024.","status":"PASS"},{"name":"  node0.minDecibels is equal to -100.","status":"PASS"},{"name":"  node0.maxDecibels is equal to -30.","status":"PASS"},{"name":"  node0.smoothingTimeConstant is equal to 0.8.","status":"PASS"},{"name":"< [default constructor] All assertions passed. (total 12 assertions)","status":"PASS"},{"name":"> [test AudioNodeOptions] ","status":"PASS"},{"name":"  new AnalyserNode(c, {channelCount: 17}) did not throw an exception.","status":"PASS"},{"name":"  node.channelCount is equal to 17.","status":"PASS"},{"name":"  new AnalyserNode(c, {channelCount: 0}) threw NotSupportedError: \"Channel count cannot be 0\".","status":"PASS"},{"name":"X new AnalyserNode(c, {channelCount: 99}) threw \"IndexSizeError\" instead of NotSupportedError.","status":"FAIL"},{"name":"  new AnalyserNode(c, {channelCountMode: \"max\"} did not throw an exception.","status":"PASS"},{"name":"  node.channelCountMode is equal to max.","status":"PASS"},{"name":"  new AnalyserNode(c, {channelCountMode: \"max\"}) did not throw an exception.","status":"PASS"},{"name":"  node.channelCountMode after valid setter is equal to max.","status":"PASS"},{"name":"  new AnalyserNode(c, {channelCountMode: \"clamped-max\"}) did not throw an exception.","status":"PASS"},{"name":"  node.channelCountMode after valid setter is equal to clamped-max.","status":"PASS"},{"name":"  new AnalyserNode(c, {channelCountMode: \"explicit\"}) did not throw an exception.","status":"PASS"},{"name":"  node.channelCountMode after valid setter is equal to explicit.","status":"PASS"},{"name":"  new AnalyserNode(c, {channelCountMode: \"foobar\"} threw TypeError: \"Type error\".","status":"PASS"},{"name":"  node.channelCountMode after invalid setter is equal to explicit.","status":"PASS"},{"name":"  new AnalyserNode(c, {channelInterpretation: \"speakers\"}) did not throw an exception.","status":"PASS"},{"name":"  node.channelInterpretation is equal to speakers.","status":"PASS"},{"name":"  new AnalyserNode(c, {channelInterpretation: \"discrete\"}) did not throw an exception.","status":"PASS"},{"name":"  node.channelInterpretation is equal to discrete.","status":"PASS"},{"name":"  new AnalyserNode(c, {channelInterpretation: \"foobar\"}) threw TypeError: \"Type error\".","status":"PASS"},{"name":"  node.channelInterpretation after invalid setter is equal to discrete.","status":"PASS"},{"name":"< [test AudioNodeOptions] 1 out of 20 assertions were failed.","status":"FAIL"},{"name":"> [constructor with options] ","status":"PASS"},{"name":"  node1 = new AnalyserNode(c, {\"fftSize\":32,\"maxDecibels\":1,\"minDecibels\":-13,\"smoothingTimeConstant\":0.125}) did not throw an exception.","status":"PASS"},{"name":"  node1 instanceof AnalyserNode is equal to true.","status":"PASS"},{"name":"  node1.fftSize is equal to 32.","status":"PASS"},{"name":"  node1.maxDecibels is equal to 1.","status":"PASS"},{"name":"  node1.minDecibels is equal to -13.","status":"PASS"},{"name":"  node1.smoothingTimeConstant is equal to 0.125.","status":"PASS"},{"name":"< [constructor with options] All assertions passed. (total 6 assertions)","status":"PASS"},{"name":"> [construct invalid options] ","status":"PASS"},{"name":"  node = new AnalyserNode(c, { fftSize: 33 }) threw IndexSizeError: \"fftSize must be power of 2 in the range 32 to 32768.\".","status":"PASS"},{"name":"  node = new AnalyserNode(c, { maxDecibels: -500 }) threw IndexSizeError: \"minDecibels must be less than maxDecibels.\".","status":"PASS"},{"name":"  node = new AnalyserNode(c, { minDecibels: -10 }) threw IndexSizeError: \"minDecibels must be less than maxDecibels.\".","status":"PASS"},{"name":"  node = new AnalyserNode(c, { smoothingTimeConstant: 2 }) threw IndexSizeError: \"Smoothing time constant needs to be between 0 and 1.\".","status":"PASS"},{"name":"  node = new AnalyserNode(c, { frequencyBinCount: 33 }) did not throw an exception.","status":"PASS"},{"name":"  node.frequencyBinCount is equal to 1024.","status":"PASS"},{"name":"< [construct invalid options] All assertions passed. (total 6 assertions)","status":"PASS"},{"name":"> [setting min/max] ","status":"PASS"},{"name":"  node = new AnalyserNode(c, {\"minDecibels\":-10,\"maxDecibels\":20}) did not throw an exception.","status":"PASS"},{"name":"  node = new AnalyserNode(c, {\"maxDecibels\":20,\"minDecibels\":-10}) did not throw an exception.","status":"PASS"},{"name":"  node = new AnalyserNode(c, {\"minDecibels\":-200,\"maxDecibels\":-150}) did not throw an exception.","status":"PASS"},{"name":"  node = new AnalyserNode(c, {\"maxDecibels\":-150,\"minDecibels\":-200}) did not throw an exception.","status":"PASS"},{"name":"  node = new AnalyserNode(c, {\"maxDecibels\":-150,\"minDecibels\":-10}) threw IndexSizeError: \"minDecibels must be less than maxDecibels.\".","status":"PASS"},{"name":"  node = new AnalyserNode(c, {\"minDecibels\":-10,\"maxDecibels\":-150}) threw IndexSizeError: \"minDecibels must be less than maxDecibels.\".","status":"PASS"},{"name":"< [setting min/max] All assertions passed. (total 6 assertions)","status":"PASS"},{"name":"# AUDIT TASK RUNNER FINISHED: 1 out of 7 tasks were failed.","status":"FAIL"}]}