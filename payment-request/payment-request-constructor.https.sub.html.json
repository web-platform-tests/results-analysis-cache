{"status":"OK","subtests":[{"name":"If details.id is missing, assign an identifier","status":"PASS"},{"name":"If details.id is missing, assign a unique identifier","status":"PASS"},{"name":"If the same id is provided, then use it","status":"PASS"},{"name":"Use ids even if they are strange","status":"PASS"},{"name":"Use provided request ID","status":"PASS"},{"name":"If the length of the methodData sequence is zero, then throw a TypeError","status":"PASS"},{"name":"If payment method is duplicate, then throw a RangeError","status":"PASS"},{"name":"Modifier method data must be JSON-serializable object","status":"PASS"},{"name":"Rethrow any exceptions of JSON-serializing paymentMethod.data into a string","status":"PASS"},{"name":"If details.total.amount.value is not a valid decimal monetary value, then throw a TypeError","status":"PASS"},{"name":"PaymentDetailsBase members can be 0 length","status":"PASS"},{"name":"If the first character of details.total.amount.value is U+002D HYPHEN-MINUS, then throw a TypeError","status":"PASS"},{"name":"For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value, then throw a TypeError","status":"PASS"},{"name":"Negative values are allowed for displayItems.amount.value, irrespective of total amount","status":"PASS"},{"name":"it handles high precision currency values without throwing","status":"PASS"},{"name":"Throw TypeError if modifier.total.amount.value is not a valid decimal monetary value","status":"PASS"},{"name":"If amount.value of additionalDisplayItems is not a valid decimal monetary value, then throw a TypeError","status":"PASS"},{"name":"Modifier data must be JSON-serializable object (an Array in this case)","status":"PASS"},{"name":"Modifier data must be JSON-serializable object (an Object in this case)","status":"PASS"},{"name":"Rethrow any exceptions of JSON-serializing modifier.data","status":"PASS"}]}