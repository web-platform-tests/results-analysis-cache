{"status":"OK","subtests":[{"name":"Blob interface object","status":"PASS"},{"name":"Blob constructor with no arguments","status":"PASS"},{"name":"Blob constructor with no arguments, without 'new'","status":"PASS"},{"name":"Blob constructor without brackets","status":"PASS"},{"name":"Blob constructor with undefined as first argument","status":"PASS"},{"name":"Passing non-objects, Dates and RegExps for blobParts should throw a TypeError.","status":"PASS"},{"name":"A plain object with @@iterator should be treated as a sequence for the blobParts argument.","status":"FAIL"},{"name":"A plain object with custom @@iterator should be treated as a sequence for the blobParts argument.","status":"PASS"},{"name":"A plain object with @@iterator and a length property should be treated as a sequence for the blobParts argument.","status":"FAIL"},{"name":"A String object should be treated as a sequence for the blobParts argument.","status":"FAIL"},{"name":"A Uint8Array object should be treated as a sequence for the blobParts argument.","status":"FAIL"},{"name":"The length getter should be invoked and any exceptions should be propagated.","status":"PASS"},{"name":"ToUint32 should be applied to the length and any exceptions should be propagated.","status":"PASS"},{"name":"Getters and value conversions should happen in order until an exception is thrown.","status":"FAIL"},{"name":"ToString should be called on elements of the blobParts array and any exceptions should be propagated.","status":"PASS"},{"name":"Changes to the blobParts array should be reflected in the returned Blob (pop).","status":"FAIL"},{"name":"Changes to the blobParts array should be reflected in the returned Blob (unshift).","status":"FAIL"},{"name":"ToString should be called on elements of the blobParts array.","status":"FAIL"},{"name":"ArrayBuffer elements of the blobParts array should be supported.","status":"FAIL"},{"name":"Passing typed arrays as elements of the blobParts array should work.","status":"FAIL"},{"name":"Passing a Float64Array as element of the blobParts array should work.","status":"FAIL"},{"name":"Passing BigInt typed arrays as elements of the blobParts array should work.","status":"FAIL"},{"name":"Array with two blobs","status":"FAIL"},{"name":"Array with two buffers","status":"FAIL"},{"name":"Array with two bufferviews","status":"FAIL"},{"name":"Array with mixed types","status":"FAIL"},{"name":"options properties should be accessed in lexicographic order.","status":"FAIL"},{"name":"Arguments should be evaluated from left to right.","status":"FAIL"},{"name":"Passing null (index 0) for options should use the defaults.","status":"FAIL"},{"name":"Passing null (index 0) for options should use the defaults (with newlines).","status":"FAIL"},{"name":"Passing undefined (index 1) for options should use the defaults.","status":"FAIL"},{"name":"Passing undefined (index 1) for options should use the defaults (with newlines).","status":"FAIL"},{"name":"Passing object \"[object Object]\" (index 2) for options should use the defaults.","status":"FAIL"},{"name":"Passing object \"[object Object]\" (index 2) for options should use the defaults (with newlines).","status":"FAIL"},{"name":"Passing object \"[object Object]\" (index 3) for options should use the defaults.","status":"FAIL"},{"name":"Passing object \"[object Object]\" (index 3) for options should use the defaults (with newlines).","status":"FAIL"},{"name":"Passing object \"/regex/\" (index 4) for options should use the defaults.","status":"FAIL"},{"name":"Passing object \"/regex/\" (index 4) for options should use the defaults (with newlines).","status":"FAIL"},{"name":"Passing function \"function() {}\" (index 5) for options should use the defaults.","status":"FAIL"},{"name":"Passing function \"function() {}\" (index 5) for options should use the defaults (with newlines).","status":"FAIL"},{"name":"Passing 123 for options should throw","status":"PASS"},{"name":"Passing 123.4 for options should throw","status":"PASS"},{"name":"Passing true for options should throw","status":"PASS"},{"name":"Passing \"abc\" for options should throw","status":"PASS"},{"name":"Blob with type \"\"","status":"PASS"},{"name":"Blob with type \"a\"","status":"PASS"},{"name":"Blob with type \"A\"","status":"PASS"},{"name":"Blob with type \"text/html\"","status":"PASS"},{"name":"Blob with type \"TEXT/HTML\"","status":"PASS"},{"name":"Blob with type \"text/plain;charset=utf-8\"","status":"PASS"},{"name":"Blob with type \"√•\"","status":"PASS"},{"name":"Blob with type \"êëæ\"","status":"PASS"},{"name":"Blob with type \" image/gif \"","status":"PASS"},{"name":"Blob with type \"\\timage/gif\\t\"","status":"PASS"},{"name":"Blob with type \"image/gif;\"","status":"PASS"},{"name":"Blob with type \"ƒ∞mage/gif\"","status":"PASS"},{"name":"Blob with type \"ƒ±mage/gif\"","status":"PASS"},{"name":"Blob with type \"image/gif\\0\"","status":"PASS"},{"name":"Blob with type \"unknown/unknown\"","status":"PASS"},{"name":"Blob with type \"text/plain\"","status":"PASS"},{"name":"Blob with type \"image/png\"","status":"PASS"},{"name":"Passing a FrozenArray as the blobParts array should work (FrozenArray<MessagePort>).","status":"PASS"}]}