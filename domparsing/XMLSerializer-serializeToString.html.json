{"status":"OK","subtests":[{"name":"check XMLSerializer.serializeToString method could parsing xmldoc to string","status":"PASS"},{"name":"check XMLSerializer.serializeToString method could parsing document to string","status":"PASS"},{"name":"Check if the default namespace is correctly reset.","status":"PASS"},{"name":"Check if there is no redundant empty namespace declaration.","status":"PASS"},{"name":"Check if redundant xmlns=\"...\" is dropped.","status":"FAIL"},{"name":"Check if inconsistent xmlns=\"...\" is dropped.","status":"FAIL"},{"name":"Check if an attribute with namespace and no prefix is serialized with the nearest-declared prefix","status":"PASS"},{"name":"Check if an attribute with namespace and no prefix is serialized with the nearest-declared prefix even if the prefix is assigned to another namespace.","status":"FAIL"},{"name":"Check if the prefix of an attribute is replaced with another existing prefix mapped to the same namespace URI.","status":"PASS"},{"name":"Check if the prefix of an attribute is NOT preserved in a case where neither its prefix nor its namespace URI is not already used.","status":"FAIL"},{"name":"Check if the prefix of an attribute is replaced with a generated one in a case where the prefix is already mapped to a different namespace URI.","status":"FAIL"},{"name":"check XMLSerializer.serializeToString escapes attribute values for roundtripping","status":"PASS"},{"name":"Check if attribute serialization takes into account of following xmlns:* attributes","status":"FAIL"},{"name":"Check if attribute serialization takes into account of the same prefix declared in an ancestor element","status":"FAIL"},{"name":"Check if start tag serialization drops element prefix if the namespace is same as inherited default namespace.","status":"FAIL"},{"name":"Check if start tag serialization finds an appropriate prefix.","status":"PASS"},{"name":"Check if start tag serialization takes into account of its xmlns:* attributes","status":"FAIL"},{"name":"Check if start tag serialization applied the original prefix even if it is declared in an ancestor element.","status":"FAIL"},{"name":"Check if start tag serialization does NOT apply the default namespace if its namespace is declared in an ancestor.","status":"FAIL"},{"name":"Check if generated prefixes match to \"ns${index}\".","status":"FAIL"},{"name":"Check if \"ns1\" is generated even if the element already has xmlns:ns1.","status":"FAIL"},{"name":"Check if no special handling for XLink namespace unlike HTML serializer.","status":"FAIL"},{"name":"Check if document fragment serializes.","status":"PASS"}]}