{"status":"OK","subtests":[{"name":"new RTCPeerConnection() should have default rtcpMuxPolicy require","status":"FAIL"},{"name":"new RTCPeerConnection({ rtcpMuxPolicy: undefined }) should have default rtcpMuxPolicy require","status":"FAIL"},{"name":"new RTCPeerConnection({ rtcpMuxPolicy: 'require' }) should succeed","status":"FAIL"},{"name":"new RTCPeerConnection({ rtcpMuxPolicy: 'negotiate' }) may succeed or throw NotSupportedError","status":"FAIL"},{"name":"new RTCPeerConnection(config) - with { rtcpMuxPolicy: null } should throw TypeError","status":"FAIL"},{"name":"setConfiguration(config) - with { rtcpMuxPolicy: null } should throw TypeError","status":"FAIL"},{"name":"new RTCPeerConnection(config) - with { rtcpMuxPolicy: 'invalid' } should throw TypeError","status":"FAIL"},{"name":"setConfiguration(config) - with { rtcpMuxPolicy: 'invalid' } should throw TypeError","status":"FAIL"},{"name":"setConfiguration({ rtcpMuxPolicy: 'negotiate' }) with initial rtcpMuxPolicy require should throw InvalidModificationError","status":"FAIL"},{"name":"setConfiguration({ rtcpMuxPolicy: 'require' }) with initial rtcpMuxPolicy negotiate should throw InvalidModificationError","status":"FAIL"},{"name":"setConfiguration({}) with initial rtcpMuxPolicy negotiate should throw InvalidModificationError","status":"FAIL"},{"name":"setRemoteDescription throws InvalidAccessError when called with an offer without rtcp-mux and rtcpMuxPolicy is set to require","status":"FAIL"},{"name":"setRemoteDescription throws InvalidAccessError when called with an answer without rtcp-mux and rtcpMuxPolicy is set to require","status":"FAIL"}]}