{"status":"OK","subtests":[{"name":"Document position-fallback matches @position-fallback in document scope","status":"PASS"},{"name":"Document position-fallback does not match @position-fallback in #outer_host scope","status":"PASS"},{"name":"Document position-fallback does not match @position-fallback in #inner_host scope","status":"PASS"},{"name":"Outer position-fallback matches @position-fallback in document scope","status":"PASS"},{"name":"Outer position-fallback matches @position-fallback in #outer_host scope","status":"PASS"},{"name":"Outer position-fallback does not match @position-fallback in #inner_host scope","status":"PASS"},{"name":"Inner position-fallback matches @position-fallback in document scope","status":"PASS"},{"name":"Inner position-fallback matches @position-fallback in #outer_host scope","status":"PASS"},{"name":"Inner position-fallback matches @position-fallback in #inner_host scope","status":"PASS"},{"name":"@position-fallback from same scope as :host rule","status":"PASS"},{"name":"@position-fallback from same scope as ::slotted() rule","status":"PASS"},{"name":"@position-fallback from same scope as ::part() rule","status":"PASS"}]}