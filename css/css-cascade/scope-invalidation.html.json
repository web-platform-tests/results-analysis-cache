{"status":"OK","subtests":[{"name":"Element becoming scope root","status":"FAIL"},{"name":"Element becoming scope root (selector list)","status":"FAIL"},{"name":"Element becoming scope root, with inner :scope rule","status":"FAIL"},{"name":"Parent element becoming scope limit","status":"FAIL"},{"name":"Parent element becoming scope limit (selector list)","status":"FAIL"},{"name":"Subject element becoming scope limit","status":"FAIL"},{"name":"Parent element affecting scope limit","status":"FAIL"},{"name":"Sibling element affecting scope limit","status":"FAIL"},{"name":"Toggling inner/outer scope roots","status":"FAIL"},{"name":"Element becoming root, with :scope in subject","status":"FAIL"},{"name":"Scope root with :has()","status":"FAIL"},{"name":"Scope root with :has(), :scope subject","status":"FAIL"},{"name":"Scope root with :has(), :scope both subject and non-subject","status":"FAIL"},{"name":"Scope limit with :has()","status":"FAIL"},{"name":"Element becoming root, with :scope selected by ~ combinator","status":"FAIL"},{"name":"Element becoming root via ~ combinator","status":"FAIL"},{"name":"Element becoming root via + combinator","status":"FAIL"},{"name":":not(scope) in subject","status":"FAIL"},{"name":":not(scope) in ancestor","status":"FAIL"},{"name":":not(scope) in limit subject","status":"FAIL"},{"name":":not(scope) in limit ancestor","status":"FAIL"},{"name":":nth-child() in scope root","status":"FAIL"},{"name":":nth-child() in scope limit","status":"FAIL"}]}