{"status":"OK","subtests":[{"name":"Instrument keys are returned in the original insertion order","status":"PASS"},{"name":"Deleting an existing instrument returns true","status":"PASS"},{"name":"Deleting an existing instrument the second time returns false","status":"PASS"},{"name":"Deleting a non-existing instrument returns false","status":"PASS"},{"name":"Getting an existing instrument returns the instrument","status":"PASS"},{"name":"Getting a non-existing instrument returns undefined","status":"PASS"},{"name":"Resetting an existing instrument updates the instrument","status":"PASS"},{"name":"Clearing the instruments","status":"PASS"},{"name":"Cannot register instruments with invalid icon media type image/jif","status":"PASS"},{"name":"Don't crash when registering instruments with very long icon media type image/pngggggg...","status":"PASS"},{"name":"Don't crash when registering an instrument with a very long icon size 888...x888...","status":"PASS"},{"name":"Cannot register instruments with invalid icon size \"256 256\" (missing \"x\")","status":"PASS"},{"name":"Cannot register instruments with invalid icon URL (has a null character)","status":"PASS"},{"name":"Cannot register instruments with non-existing non-https icon URL","status":"PASS"},{"name":"Cannot register instruments with an existing non-https icon URL","status":"PASS"},{"name":"Don't crash on very long key, name, method, and capability strings.","status":"PASS"},{"name":"Don't crash on null characters in key, name, method, and capability strings.","status":"PASS"}]}