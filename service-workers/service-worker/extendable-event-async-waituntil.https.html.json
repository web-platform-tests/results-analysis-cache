{"status":"OK","subtests":[{"name":"Test calling waitUntil in a task at the end of the event handler without an existing extension throws","status":"FAIL"},{"name":"Test calling waitUntil in a microtask at the end of the event handler without an existing extension suceeds","status":"FAIL"},{"name":"Test calling waitUntil in a different task an existing extension succeeds","status":"FAIL"},{"name":"Test calling waitUntil at the end of an existing extension promise handler succeeds (event is still being dispatched)","status":"FAIL"},{"name":"Test calling waitUntil in a microtask at the end of an existing extension promise handler succeeds (event is still being dispatched)","status":"FAIL"},{"name":"Test calling waitUntil in an existing extension promise handler succeeds (event is not being dispatched)","status":"FAIL"},{"name":"Test calling waitUntil in a microtask at the end of an existing extension promise handler throws (event is not being dispatched)","status":"FAIL"},{"name":"Test calling waitUntil after the current extension expired in a different task fails","status":"FAIL"},{"name":"Test calling waitUntil on a script constructed ExtendableEvent throws exception","status":"FAIL"},{"name":"Test calling waitUntil asynchronously with pending respondWith promise.","status":"FAIL"},{"name":"Test calling waitUntil synchronously inside microtask of respondWith promise (event is being dispatched).","status":"FAIL"},{"name":"Test calling waitUntil asynchronously inside microtask of respondWith promise (event is being dispatched).","status":"FAIL"},{"name":"Test calling waitUntil synchronously inside microtask of respondWith promise (event is not being dispatched).","status":"FAIL"},{"name":"Test calling waitUntil asynchronously inside microtask of respondWith promise (event is not being dispatched).","status":"FAIL"}]}