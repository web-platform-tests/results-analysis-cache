{"status":"OK","subtests":[{"name":"global setup","status":"PASS"},{"name":"Service Worker headers in the request of a fetch event","status":"PASS"},{"name":"Service Worker responds to fetch event with string","status":"PASS"},{"name":"Service Worker responds to fetch event using request fragment with string","status":"PASS"},{"name":"Service Worker responds to fetch event with blob body","status":"PASS"},{"name":"Service Worker responds to fetch event with the referrer URL","status":"PASS"},{"name":"Service Worker responds to fetch event with an existing client id","status":"PASS"},{"name":"Service Worker responds to fetch event with the correct resulting client id","status":"FAIL"},{"name":"Service Worker does not respond to fetch event","status":"PASS"},{"name":"Service Worker responds to fetch event with null response body","status":"PASS"},{"name":"Service Worker fetches other file in fetch event","status":"PASS"},{"name":"Service Worker responds to fetch event with POST form","status":"PASS"},{"name":"Service Worker falls back to network in fetch event with POST form","status":"PASS"},{"name":"Multiple calls of respondWith must throw InvalidStateErrors","status":"PASS"},{"name":"Service Worker event.respondWith must set the used flag","status":"PASS"},{"name":"Service Worker should expose FetchEvent URL fragments.","status":"PASS"},{"name":"Service Worker responds to fetch event with the correct cache types","status":"FAIL"},{"name":"Service Worker should intercept EventSource","status":"PASS"},{"name":"Service Worker responds to fetch event with the correct integrity_metadata","status":"PASS"},{"name":"FetchEvent#body is a string","status":"PASS"},{"name":"FetchEvent#body is a ReadableStream","status":"FAIL"},{"name":"FetchEvent#body is a string and is passed to network fallback","status":"PASS"},{"name":"FetchEvent#body is a ReadableStream and is passed to network fallback","status":"FAIL"},{"name":"FetchEvent#body is a none Uint8Array ReadableStream and is passed to a service worker","status":"FAIL"},{"name":"FetchEvent#body is a string, used and passed to network fallback","status":"PASS"},{"name":"FetchEvent#body is a ReadableStream, used and passed to network fallback","status":"FAIL"},{"name":"FetchEvent#body is a string, cloned and passed to network fallback","status":"PASS"},{"name":"FetchEvent#body is a ReadableStream, cloned and passed to network fallback","status":"PASS"},{"name":"FetchEvent#body is a blob","status":"PASS"},{"name":"FetchEvent#body is a blob and is passed to network fallback","status":"PASS"},{"name":"Service Worker responds to fetch event with the correct keepalive value","status":"PASS"},{"name":"FetchEvent#request.isReloadNavigation is true (location.reload())","status":"FAIL"},{"name":"FetchEvent#request.isReloadNavigation is true (history.go(0))","status":"FAIL"},{"name":"FetchEvent#request.isReloadNavigation is true (POST + location.reload())","status":"FAIL"},{"name":"FetchEvent#request.isReloadNavigation is true (with history traversal)","status":"FAIL"},{"name":"FetchEvent#request.isHistoryNavigation is true (with history.go(-1))","status":"FAIL"},{"name":"FetchEvent#request.isHistoryNavigation is true (with history.go(1))","status":"FAIL"},{"name":"FetchEvent#request.isHistoryNavigation is false (with history.go(0))","status":"FAIL"},{"name":"FetchEvent#request.isHistoryNavigation is false (with location.reload)","status":"FAIL"},{"name":"FetchEvent#request.isHistoryNavigation is true (with history.go(-2))","status":"FAIL"},{"name":"FetchEvent#request.isHistoryNavigation is true (with history.go(2))","status":"FAIL"},{"name":"FetchEvent#request.isHistoryNavigation is true (POST + history.go(-1))","status":"FAIL"},{"name":"XHR upload progress events for response coming from SW","status":"PASS"},{"name":"XHR upload progress events for network fallback","status":"PASS"},{"name":"Fetch with POST with text on sw 421 response should not be retried.","status":"PASS"},{"name":"restore global state","status":"PASS"}]}