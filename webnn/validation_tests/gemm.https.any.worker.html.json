{"status":"OK","subtests":[{"name":"assert_not_equals(navigator.ml, undefined, \"ml property is defined on navigator\")","status":"PASS"},{"name":"[gemm] throw if first input is from another builder","status":"PASS"},{"name":"[gemm] throw if second input is from another builder","status":"PASS"},{"name":"[gemm] throw if c option is from another builder","status":"PASS"},{"name":"[gemm] Test building gemm with default option.","status":"PASS"},{"name":"[gemm] Throw if inputShapeA[1] is not equal to inputShapeB[0] default options.","status":"FAIL"},{"name":"Test building gemm with aTranspose=true.","status":"PASS"},{"name":"Throw if inputShapeA[0] is not equal to inputShapeB[0] with aTranspose=true.","status":"FAIL"},{"name":"Test building gemm with bTranspose=true.","status":"PASS"},{"name":"Throw if inputShapeA[0] is not equal to inputShapeB[0] with bTranspose=true.","status":"FAIL"},{"name":"Throw if the rank of inputA is not 2.","status":"FAIL"},{"name":"Throw if the rank of inputB is not 2.","status":"FAIL"},{"name":"Throw if data types of two inputs do not match.","status":"FAIL"},{"name":"Test building gemm with inputC.","status":"PASS"},{"name":"Test building gemm with scalar inputC.","status":"PASS"},{"name":"Throw if inputShapeC is not unidirectionally broadcastable to the output shape [inputShapeA[0], inputShapeB[1]].","status":"FAIL"},{"name":"Throw if data type of inputC does not match ones of inputA and inputB.","status":"FAIL"},{"name":"Throw if the rank of inputC is 3.","status":"FAIL"},{"name":"Throw if the byte length of the output operand is too large.","status":"FAIL"}]}