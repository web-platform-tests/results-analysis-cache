{"status":"OK","subtests":[{"name":"If node is a host-including inclusive ancestor of parent, then throw a HierarchyRequestError DOMException.","status":"PASS"},{"name":"If node is not a DocumentFragment, DocumentType, Element, Text, ProcessingInstruction, or Comment node, then throw a HierarchyRequestError DOMException.","status":"PASS"},{"name":"If node is a Text node and parent is a document, then throw a HierarchyRequestError DOMException.","status":"PASS"},{"name":"If node is a doctype and parent is not a document, then throw a HierarchyRequestError DOMException.","status":"PASS"},{"name":"If node is a DocumentFragment with multiple elements and parent is a document, then throw a HierarchyRequestError DOMException.","status":"PASS"},{"name":"If node is a DocumentFragment with an element and parent is a document with another element, then throw a HierarchyRequestError DOMException.","status":"PASS"},{"name":"If node is an Element and parent is a document with another element, then throw a HierarchyRequestError DOMException.","status":"PASS"},{"name":"If node is a doctype and parent is a document with another doctype, then throw a HierarchyRequestError DOMException.","status":"PASS"},{"name":"If node is a doctype and parent is a document with an element, then throw a HierarchyRequestError DOMException.","status":"PASS"},{"name":"Element.replaceChildren() without any argument, on a parent having no child.","status":"PASS"},{"name":"Element.replaceChildren() with null as an argument, on a parent having no child.","status":"PASS"},{"name":"Element.replaceChildren() with undefined as an argument, on a parent having no child.","status":"PASS"},{"name":"Element.replaceChildren() with only text as an argument, on a parent having no child.","status":"PASS"},{"name":"Element.replaceChildren() with only one element as an argument, on a parent having no child.","status":"PASS"},{"name":"Element.replaceChildren() with null as an argument, on a parent having a child.","status":"PASS"},{"name":"Element.replaceChildren() with one element and text as argument, on a parent having a child.","status":"PASS"},{"name":"Element.replaceChildren() should move nodes in the right order","status":"PASS"},{"name":"DocumentFragment.replaceChildren() without any argument, on a parent having no child.","status":"PASS"},{"name":"DocumentFragment.replaceChildren() with null as an argument, on a parent having no child.","status":"PASS"},{"name":"DocumentFragment.replaceChildren() with undefined as an argument, on a parent having no child.","status":"PASS"},{"name":"DocumentFragment.replaceChildren() with only text as an argument, on a parent having no child.","status":"PASS"},{"name":"DocumentFragment.replaceChildren() with only one element as an argument, on a parent having no child.","status":"PASS"},{"name":"DocumentFragment.replaceChildren() with null as an argument, on a parent having a child.","status":"PASS"},{"name":"DocumentFragment.replaceChildren() with one element and text as argument, on a parent having a child.","status":"PASS"},{"name":"DocumentFragment.replaceChildren() should move nodes in the right order","status":"PASS"}]}