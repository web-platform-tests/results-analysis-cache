{"status":"OK","subtests":[{"name":"Comment.after() without any argument.","status":"PASS"},{"name":"Comment.after() with null as an argument.","status":"PASS"},{"name":"Comment.after() with undefined as an argument.","status":"PASS"},{"name":"Comment.after() with the empty string as an argument.","status":"PASS"},{"name":"Comment.after() with only text as an argument.","status":"PASS"},{"name":"Comment.after() with only one element as an argument.","status":"PASS"},{"name":"Comment.after() with one element and text as arguments.","status":"PASS"},{"name":"Comment.after() with context object itself as the argument.","status":"PASS"},{"name":"Comment.after() with context object itself and node as the arguments, switching positions.","status":"PASS"},{"name":"Comment.after() with all siblings of child as arguments.","status":"PASS"},{"name":"Comment.before() with some siblings of child as arguments; no changes in tree; viable sibling is first child.","status":"PASS"},{"name":"Comment.after() with some siblings of child as arguments; no changes in tree.","status":"PASS"},{"name":"Comment.after() when pre-insert behaves like append.","status":"PASS"},{"name":"Comment.after() with one sibling of child and text as arguments.","status":"PASS"},{"name":"Comment.after() on a child without any parent.","status":"PASS"},{"name":"Element.after() without any argument.","status":"PASS"},{"name":"Element.after() with null as an argument.","status":"PASS"},{"name":"Element.after() with undefined as an argument.","status":"PASS"},{"name":"Element.after() with the empty string as an argument.","status":"PASS"},{"name":"Element.after() with only text as an argument.","status":"PASS"},{"name":"Element.after() with only one element as an argument.","status":"PASS"},{"name":"Element.after() with one element and text as arguments.","status":"PASS"},{"name":"Element.after() with context object itself as the argument.","status":"PASS"},{"name":"Element.after() with context object itself and node as the arguments, switching positions.","status":"PASS"},{"name":"Element.after() with all siblings of child as arguments.","status":"PASS"},{"name":"Element.before() with some siblings of child as arguments; no changes in tree; viable sibling is first child.","status":"PASS"},{"name":"Element.after() with some siblings of child as arguments; no changes in tree.","status":"PASS"},{"name":"Element.after() when pre-insert behaves like append.","status":"PASS"},{"name":"Element.after() with one sibling of child and text as arguments.","status":"PASS"},{"name":"Element.after() on a child without any parent.","status":"PASS"},{"name":"Text.after() without any argument.","status":"PASS"},{"name":"Text.after() with null as an argument.","status":"PASS"},{"name":"Text.after() with undefined as an argument.","status":"PASS"},{"name":"Text.after() with the empty string as an argument.","status":"PASS"},{"name":"Text.after() with only text as an argument.","status":"PASS"},{"name":"Text.after() with only one element as an argument.","status":"PASS"},{"name":"Text.after() with one element and text as arguments.","status":"PASS"},{"name":"Text.after() with context object itself as the argument.","status":"PASS"},{"name":"Text.after() with context object itself and node as the arguments, switching positions.","status":"PASS"},{"name":"Text.after() with all siblings of child as arguments.","status":"PASS"},{"name":"Text.before() with some siblings of child as arguments; no changes in tree; viable sibling is first child.","status":"PASS"},{"name":"Text.after() with some siblings of child as arguments; no changes in tree.","status":"PASS"},{"name":"Text.after() when pre-insert behaves like append.","status":"PASS"},{"name":"Text.after() with one sibling of child and text as arguments.","status":"PASS"},{"name":"Text.after() on a child without any parent.","status":"PASS"}]}