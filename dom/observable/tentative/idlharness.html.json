{"status":"OK","subtests":[{"name":"idl_test setup","status":"PASS"},{"name":"idl_test validation","status":"PASS"},{"name":"Subscriber interface: existence and properties of interface object","status":"FAIL"},{"name":"Subscriber interface object length","status":"FAIL"},{"name":"Subscriber interface object name","status":"FAIL"},{"name":"Subscriber interface: existence and properties of interface prototype object","status":"FAIL"},{"name":"Subscriber interface: existence and properties of interface prototype object's \"constructor\" property","status":"FAIL"},{"name":"Subscriber interface: existence and properties of interface prototype object's @@unscopables property","status":"FAIL"},{"name":"Subscriber interface: operation next(any)","status":"FAIL"},{"name":"Subscriber interface: operation error(any)","status":"FAIL"},{"name":"Subscriber interface: operation complete()","status":"FAIL"},{"name":"Subscriber interface: operation addTeardown(VoidFunction)","status":"FAIL"},{"name":"Subscriber interface: attribute active","status":"FAIL"},{"name":"Subscriber interface: attribute signal","status":"FAIL"},{"name":"Subscriber must be primary interface of (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })()","status":"FAIL"},{"name":"Stringification of (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })()","status":"FAIL"},{"name":"Subscriber interface: (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })() must inherit property \"next(any)\" with the proper type","status":"FAIL"},{"name":"Subscriber interface: calling next(any) on (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })() with too few arguments must throw TypeError","status":"FAIL"},{"name":"Subscriber interface: (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })() must inherit property \"error(any)\" with the proper type","status":"FAIL"},{"name":"Subscriber interface: calling error(any) on (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })() with too few arguments must throw TypeError","status":"FAIL"},{"name":"Subscriber interface: (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })() must inherit property \"complete()\" with the proper type","status":"FAIL"},{"name":"Subscriber interface: (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })() must inherit property \"addTeardown(VoidFunction)\" with the proper type","status":"FAIL"},{"name":"Subscriber interface: calling addTeardown(VoidFunction) on (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })() with too few arguments must throw TypeError","status":"FAIL"},{"name":"Subscriber interface: (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })() must inherit property \"active\" with the proper type","status":"FAIL"},{"name":"Subscriber interface: (() => { let s = null; new Observable(_s => s = _s).subscribe({}); return s })() must inherit property \"signal\" with the proper type","status":"FAIL"},{"name":"Observable interface: existence and properties of interface object","status":"FAIL"},{"name":"Observable interface object length","status":"FAIL"},{"name":"Observable interface object name","status":"FAIL"},{"name":"Observable interface: existence and properties of interface prototype object","status":"FAIL"},{"name":"Observable interface: existence and properties of interface prototype object's \"constructor\" property","status":"FAIL"},{"name":"Observable interface: existence and properties of interface prototype object's @@unscopables property","status":"FAIL"},{"name":"Observable interface: operation subscribe(optional ObserverUnion, optional SubscribeOptions)","status":"FAIL"},{"name":"Observable must be primary interface of new Observable(() => {})","status":"FAIL"},{"name":"Stringification of new Observable(() => {})","status":"FAIL"},{"name":"Observable interface: new Observable(() => {}) must inherit property \"subscribe(optional ObserverUnion, optional SubscribeOptions)\" with the proper type","status":"FAIL"},{"name":"Observable interface: calling subscribe(optional ObserverUnion, optional SubscribeOptions) on new Observable(() => {}) with too few arguments must throw TypeError","status":"FAIL"}]}