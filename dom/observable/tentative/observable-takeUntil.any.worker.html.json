{"status":"OK","subtests":[{"name":"takeUntil subscribes to source Observable and mirrors it uninterrupted","status":"PASS"},{"name":"takeUntil subscribes to notifier","status":"PASS"},{"name":"takeUntil: notifier next() unsubscribes from notifier","status":"FAIL"},{"name":"takeUntil: notifier error() unsubscribes from notifier","status":"FAIL"},{"name":"takeUntil: notifier throw Error unsubscribes from notifier","status":"FAIL"},{"name":"takeUntil: notifier next() unsubscribes from notifier & source observable","status":"FAIL"},{"name":"takeUntil()'s AbortSignal unsubscribes from notifier & source observable","status":"PASS"},{"name":"takeUntil: source never subscribed to when notifier synchronously emits a value","status":"PASS"},{"name":"takeUntil: source never subscribed to when notifier synchronously emits error","status":"PASS"},{"name":"takeUntil: source is uninterrupted when notifier completes, even synchronously","status":"PASS"},{"name":"takeUntil() mirrors the source Observable until its first next() value","status":"PASS"},{"name":"takeUntil: notifier calls `Subscriber#error()` twice; second goes to global error handler","status":"PASS"}]}