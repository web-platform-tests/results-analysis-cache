{"status":"OK","subtests":[{"name":"Observable constructor","status":"PASS"},{"name":"subscribe() can be called with no arguments","status":"PASS"},{"name":"Subscriber interface is not constructible","status":"FAIL"},{"name":"Subscribe with just a function as the next handler","status":"FAIL"},{"name":"Observable constructor calls initializer on subscribe","status":"FAIL"},{"name":"Observable error path called synchronously","status":"FAIL"},{"name":"Subscriber must have receiver","status":"FAIL"},{"name":"Subscriber next & error must recieve argument","status":"PASS"},{"name":"Subscriber complete() will set active to false, and abort signal","status":"FAIL"},{"name":"Subscriber active is readonly","status":"FAIL"},{"name":"Subscriber signal is readonly","status":"FAIL"},{"name":"Observable should error if initializer throws","status":"FAIL"},{"name":"Subscription is inactive after complete()","status":"FAIL"},{"name":"Subscription is inactive after error()","status":"FAIL"},{"name":"Subscription is inactive when aborted signal is passed in","status":"FAIL"},{"name":"Subscriber#signal is not the same AbortSignal as the one passed into `subscribe()`","status":"FAIL"},{"name":"Subscription does not emit values after completion","status":"FAIL"},{"name":"Subscription does not emit values after error","status":"FAIL"},{"name":"Completing or nexting a subscriber after an error does nothing","status":"FAIL"},{"name":"Errors pushed to the subscriber that are not handled by the subscription are reported to the global","status":"FAIL"},{"name":"Errors thrown in the initializer that are not handled by the subscription are reported to the global","status":"PASS"},{"name":"Subscription reports errors that are pushed after subscriber is closed by completion","status":"FAIL"},{"name":"Errors thrown by initializer function after subscriber is closed by completion are reported","status":"FAIL"},{"name":"Errors thrown by initializer function after subscriber is closed by error are reported","status":"FAIL"},{"name":"Errors pushed by initializer function after subscriber is closed by error are reported","status":"FAIL"},{"name":"Subscriber#complete() cannot re-entrantly invoke itself","status":"FAIL"},{"name":"Subscriber#error() cannot re-entrantly invoke itself","status":"FAIL"},{"name":"Unsubscription lifecycle","status":"FAIL"},{"name":"Aborting a subscription should stop emitting values","status":"FAIL"},{"name":"Calling subscribe should never throw an error synchronously, initializer throws error","status":"PASS"},{"name":"Calling subscribe should never throw an error synchronously, subscriber pushes error","status":"FAIL"},{"name":"Teardown should be called when subscription is aborted","status":"FAIL"},{"name":"Teardowns should be called when subscription is closed by completion","status":"FAIL"},{"name":"Teardowns should be called when subscription is closed by subscriber pushing an error","status":"FAIL"},{"name":"Teardowns should be called when subscription is closed by subscriber throwing error","status":"FAIL"},{"name":"Teardowns should be called synchronously during addTeardown() if the subscription is inactive","status":"FAIL"}]}