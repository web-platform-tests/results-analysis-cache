{"status":"TIMEOUT","subtests":[{"name":"Test helper: fetching and sanity checking test JSON: scopes.json","status":"PASS"},{"name":"Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: a","status":"TIMEOUT"},{"name":"Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: b","status":"NOTRUN"},{"name":"Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: c","status":"NOTRUN"},{"name":"Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: d","status":"NOTRUN"},{"name":"Fallback to toplevel and between scopes: should use a direct scope override: a","status":"NOTRUN"},{"name":"Fallback to toplevel and between scopes: should use a direct scope override: b","status":"NOTRUN"},{"name":"Fallback to toplevel and between scopes: should use a direct scope override: c","status":"NOTRUN"},{"name":"Fallback to toplevel and between scopes: should use a direct scope override: d","status":"NOTRUN"},{"name":"Fallback to toplevel and between scopes: should use an indirect scope override: a","status":"NOTRUN"},{"name":"Fallback to toplevel and between scopes: should use an indirect scope override: b","status":"NOTRUN"},{"name":"Fallback to toplevel and between scopes: should use an indirect scope override: c","status":"NOTRUN"},{"name":"Fallback to toplevel and between scopes: should use an indirect scope override: d","status":"NOTRUN"},{"name":"Relative URL scope keys: An empty string scope is a scope with import map base URL: a","status":"NOTRUN"},{"name":"Relative URL scope keys: An empty string scope is a scope with import map base URL: b","status":"NOTRUN"},{"name":"Relative URL scope keys: An empty string scope is a scope with import map base URL: c","status":"NOTRUN"},{"name":"Relative URL scope keys: './' scope is a scope with import map base URL's directory: a","status":"NOTRUN"},{"name":"Relative URL scope keys: './' scope is a scope with import map base URL's directory: b","status":"NOTRUN"},{"name":"Relative URL scope keys: './' scope is a scope with import map base URL's directory: c","status":"NOTRUN"},{"name":"Relative URL scope keys: '../' scope is a scope with import map base URL's parent directory: a","status":"NOTRUN"},{"name":"Relative URL scope keys: '../' scope is a scope with import map base URL's parent directory: b","status":"NOTRUN"},{"name":"Relative URL scope keys: '../' scope is a scope with import map base URL's parent directory: c","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dot","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dot/foo","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dotdot","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dotdot/foo","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs inside the scope fallback to less specific scope: moment","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs inside the scope fallback to less specific scope: vue","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs inside the scope fallback to toplevel: moment/foo","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dot","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dotdot","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dot/foo","status":"NOTRUN"},{"name":"Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dotdot/foo","status":"NOTRUN"},{"name":"Package-like scenarios: Fallback to toplevel or not, depending on trailing slash match: moment","status":"NOTRUN"},{"name":"Package-like scenarios: Fallback to toplevel or not, depending on trailing slash match: moment/foo","status":"NOTRUN"},{"name":"Package-like scenarios: should still fail for package-like specifiers that are not declared: underscore/","status":"NOTRUN"},{"name":"Package-like scenarios: should still fail for package-like specifiers that are not declared: underscore/foo","status":"NOTRUN"}]}